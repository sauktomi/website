---
// ShareButton.astro - CSS-optimized reusable component for sharing content
const id = `share-${Math.random().toString(36).substring(2, 10)}`;
---

<!-- Share button for header -->
<button 
  id={`${id}-button`} 
  class="p-2 text-gray-600 hover:text-gray-900 rounded-lg hover:bg-gray-100 transition-colors" 
  aria-label="Jaa resepti"
  aria-expanded="false"
  aria-controls={`${id}-modal`}
  data-share-id={id}
>
  <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.368 2.684 3 3 0 00-5.368-2.684z"/>
  </svg>
</button>

<!-- Share Modal Popup -->
<div 
  id={`${id}-modal`} 
  class="share-modal" 
  data-share-modal-id={id}
  inert
  role="dialog"
  aria-labelledby={`${id}-title`}
>
  <!-- Backdrop -->
  <div class="share-backdrop"></div>
  
  <!-- Share popup -->
  <div class="share-popup">
    <!-- Mobile grabber handle -->
    <div class="share-popup__handle"></div>
    
    <!-- Close button -->
    <button 
      id={`${id}-close`} 
      class="share-popup__close" 
      data-share-close-id={id}
      aria-label="Sulje"
    >
      <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
      </svg>
    </button>
    
    <!-- Title -->
    <div class="text-center mb-5 mt-1 lg:-mt-3">
      <h4 id={`${id}-title`} class="text-xl font-semibold">Jaa resepti</h4>
    </div>
    
    <div class="share-options grid grid-cols-2 gap-4">
      <button class="share-option" data-platform="facebook">
        <div class="share-option__icon share-option__icon--facebook">
          <svg class="w-5 h-5 text-white" fill="currentColor" viewBox="0 0 24 24">
            <path d="M24 12.073c0-6.627-5.373-12-12-12s-12 5.373-12 12c0 5.99 4.388 10.954 10.125 11.854v-8.385H7.078v-3.47h3.047V9.43c0-3.007 1.792-4.669 4.533-4.669 1.312 0 2.686.235 2.686.235v2.953H15.83c-1.491 0-1.956.925-1.956 1.874v2.25h3.328l-.532 3.47h-2.796v8.385C19.612 23.027 24 18.062 24 12.073z"/>
          </svg>
        </div>
        <span class="text-sm font-medium">Facebook</span>
      </button>
      
      <button class="share-option" data-platform="whatsapp">
        <div class="share-option__icon share-option__icon--whatsapp">
          <svg class="w-5 h-5 text-white" fill="currentColor" viewBox="0 0 24 24">
            <path d="M17.472 14.382c-.297-.149-1.758-.867-2.03-.967-.273-.099-.471-.148-.67.15-.197.297-.767.966-.94 1.164-.173.199-.347.223-.644.075-.297-.15-1.255-.463-2.39-1.475-.883-.788-1.48-1.761-1.653-2.059-.173-.297-.018-.458.13-.606.134-.133.298-.347.446-.52.149-.174.198-.298.298-.497.099-.198.05-.371-.025-.52-.075-.149-.669-1.612-.916-2.207-.242-.579-.487-.5-.669-.51-.173-.008-.371-.01-.57-.01-.198 0-.52.074-.792.372-.272.297-1.04 1.016-1.04 2.479 0 1.462 1.065 2.875 1.213 3.074.149.198 2.096 3.2 5.077 4.487.709.306 1.262.489 1.694.625.712.227 1.36.195 1.871.118.571-.085 1.758-.719 2.006-1.413.248-.694.248-1.289.173-1.413-.074-.124-.272-.198-.57-.347m-5.421 7.403h-.004a9.87 9.87 0 01-5.031-1.378l-.361-.214-3.741.982.998-3.648-.235-.374a9.86 9.86 0 01-1.51-5.26c.001-5.45 4.436-9.884 9.888-9.884 2.64 0 5.122 1.03 6.988 2.898a9.825 9.825 0 012.893 6.994c-.003 5.45-4.437 9.884-9.885 9.884m8.413-18.297A11.815 11.815 0 0012.05 0C5.495 0 .16 5.335.157 11.892c0 2.096.547 4.142 1.588 5.945L.057 24l6.305-1.654a11.882 11.882 0 005.683 1.448h.005c6.554 0 11.89-5.335 11.893-11.893A11.821 11.821 0 0020.885 3.488"/>
          </svg>
        </div>
        <span class="text-sm font-medium">WhatsApp</span>
      </button>
      
      <button class="share-option" data-platform="telegram">
        <div class="share-option__icon share-option__icon--telegram">
          <svg class="w-5 h-5 text-white" fill="currentColor" viewBox="0 0 24 24">
            <path d="M11.944 0A12 12 0 0 0 0 12a12 12 0 0 0 12 12 12 12 0 0 0 12-12A12 12 0 0 0 12 0a12 12 0 0 0-.056 0zm4.962 7.224c.1-.002.321.023.465.14a.506.506 0 0 1 .171.325c.016.093.036.306.02.472-.18 1.898-.96 6.502-1.36 8.627-.168.9-.499 1.201-.82 1.23-.696.065-1.225-.46-1.9-.902-1.056-.693-1.653-1.124-2.678-1.8-1.185-.78-.417-1.21.258-1.91.177-.184 3.247-2.977 3.307-3.23.007-.032.014-.15-.056-.212s-.174-.041-.249-.024c-.106.024-1.793 1.14-5.061 3.345-.48.33-.913.49-1.302.48-.428-.008-1.252-.241-1.865-.44-.752-.245-1.349-.374-1.297-.789.027-.216.325-.437.893-.663 3.498-1.524 5.83-2.529 6.998-3.014 3.332-1.386 4.025-1.627 4.476-1.635z"/>
          </svg>
        </div>
        <span class="text-sm font-medium">Telegram</span>
      </button>
      
      <button class="share-option share-option--copy" data-platform="copy">
        <div class="share-option__icon share-option__icon--copy">
          <svg class="share-option__icon-default w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-4a2 2 0 00-2-2h-8a2 2 0 00-2 2v4a2 2 0 002 2z"/>
          </svg>
          <svg class="share-option__icon-success w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"/>
          </svg>
        </div>
        <span class="share-option__text text-sm font-medium">Kopioi linkki</span>
      </button>
    </div>
  </div>
</div>

<script define:vars={{ id }}>
(() => {
  // Constants - proportional to popup height for better UX
  const SWIPE_DISMISS_RATIO = 0.4; // Dismiss at 40% of popup height
  const SWIPE_FADE_RATIO = 0.35; // Full transparency at 35% of popup height
  const STATUS_HIDE_DELAY = 2000;
  
  // Share platform configurations
  const SHARE_PLATFORMS = {
    facebook: {
      url: (shareUrl) => `https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(shareUrl)}`,
      newWindow: true
    },
    whatsapp: {
      url: (shareUrl, title) => `https://wa.me/?text=${encodeURIComponent(`Katso tämä resepti: ${title}`)}%20${encodeURIComponent(shareUrl)}`,
      newWindow: true
    },
    telegram: {
      url: (shareUrl, title) => `https://t.me/share/url?url=${encodeURIComponent(shareUrl)}&text=${encodeURIComponent(title)}`,
      newWindow: true
    },
    copy: {
      action: 'clipboard'
    }
  };
  
  // Cache DOM elements
  const elements = {
    button: document.getElementById(`${id}-button`),
    modal: document.getElementById(`${id}-modal`),
    popup: null,
    backdrop: null,
    closeButton: null,
    status: null,
    shareOptions: null
  };
  
  // Initialize element cache
  if (elements.modal) {
    elements.popup = elements.modal.querySelector('.share-popup');
    elements.backdrop = elements.modal.querySelector('.share-backdrop');
    elements.closeButton = elements.modal.querySelector(`[data-share-close-id="${id}"]`);
    elements.shareOptions = elements.modal.querySelectorAll('.share-option');
  }
  
  // Validate required elements
  if (!elements.button || !elements.modal || !elements.popup) return;
  
  // Feature detection & state
  const hasNativeShare = 'share' in navigator;
  const isMobile = () => window.innerWidth < 1024;
  let isOpen = false;
  let gestureState = { 
    isDragging: false, 
    startY: 0, 
    currentY: 0,
    popupHeight: 0,
    dismissThreshold: 0,
    fadeDistance: 0
  };
  let scrollbarWidth = 0;
  let cleanupFocusTrap = null;
  let scrollY = 0;
  
  // Calculate scrollbar width once
  const calculateScrollbarWidth = () => {
    const outer = document.createElement('div');
    outer.style.cssText = 'visibility:hidden;overflow:scroll;position:absolute;top:-999px;width:100px;height:100px';
    document.body.appendChild(outer);
    
    const inner = document.createElement('div');
    inner.style.width = '100%';
    outer.appendChild(inner);
    
    scrollbarWidth = outer.offsetWidth - inner.offsetWidth;
    document.body.removeChild(outer);
  };
  
  calculateScrollbarWidth();
  
  // Utility functions
  const updateAriaStates = (expanded) => {
    elements.button.setAttribute('aria-expanded', expanded);
  };
  
  const trapFocus = () => {
    const focusableElements = elements.modal.querySelectorAll(
      'button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])'
    );
    const firstElement = focusableElements[0];
    const lastElement = focusableElements[focusableElements.length - 1];
    
    const handleTab = (e) => {
      if (e.key === 'Tab') {
        if (e.shiftKey && document.activeElement === firstElement) {
          e.preventDefault();
          lastElement.focus();
        } else if (!e.shiftKey && document.activeElement === lastElement) {
          e.preventDefault();
          firstElement.focus();
        }
      }
    };
    
    elements.modal.addEventListener('keydown', handleTab);
    firstElement?.focus();
    
    return () => elements.modal.removeEventListener('keydown', handleTab);
  };
  
  // Share functionality
  const executeShare = async (platform) => {
    const config = SHARE_PLATFORMS[platform];
    if (!config) return;
    
    const shareUrl = window.location.href;
    const title = document.title;
    
    try {
      if (config.action === 'clipboard') {
        await navigator.clipboard.writeText(shareUrl);
        setCopyButtonSuccess();
      } else if (config.newWindow) {
        window.open(config.url(shareUrl, title), '_blank', 'noopener,noreferrer');
      }
    } catch (error) {
      console.error(`Share failed for ${platform}:`, error);
      if (platform === 'copy') {
        setCopyButtonError();
      }
    }
  };
  
  // Copy button state management
  let copyResetTimeout = null;
  
  const setCopyButtonSuccess = () => {
    const copyButton = elements.modal.querySelector('[data-platform="copy"]');
    const textElement = copyButton?.querySelector('.share-option__text');
    
    if (!copyButton || !textElement) return;
    
    // Clear any existing timeout
    if (copyResetTimeout) {
      clearTimeout(copyResetTimeout);
    }
    
    // Set success state
    copyButton.classList.add('share-option--copied');
    textElement.textContent = 'Kopioitu';
    
    // Auto-reset after delay
    copyResetTimeout = setTimeout(() => {
      resetCopyButton();
    }, STATUS_HIDE_DELAY);
  };
  
  const setCopyButtonError = () => {
    // For errors, just briefly show red state then reset
    const copyButton = elements.modal.querySelector('[data-platform="copy"]');
    const textElement = copyButton?.querySelector('.share-option__text');
    
    if (!copyButton || !textElement) return;
    
    textElement.textContent = 'Virhe';
    copyButton.style.borderColor = '#ef4444';
    
    setTimeout(() => {
      resetCopyButton();
    }, 1500);
  };
  
  const resetCopyButton = () => {
    const copyButton = elements.modal.querySelector('[data-platform="copy"]');
    const textElement = copyButton?.querySelector('.share-option__text');
    
    if (!copyButton || !textElement) return;
    
    copyButton.classList.remove('share-option--copied');
    copyButton.style.removeProperty('border-color');
    textElement.textContent = 'Kopioi linkki';
    
    if (copyResetTimeout) {
      clearTimeout(copyResetTimeout);
      copyResetTimeout = null;
    }
  };
  
  // Modal positioning
  const positionModal = () => {
    if (isMobile()) {
      elements.modal.classList.add('share-modal--mobile');
    } else {
      const buttonRect = elements.button.getBoundingClientRect();
      elements.modal.classList.remove('share-modal--mobile');
      elements.modal.style.setProperty('--modal-top', `${buttonRect.bottom + 10}px`);
      elements.modal.style.setProperty('--modal-right', `${window.innerWidth - buttonRect.right}px`);
    }
  };
  
  // Modal visibility controls - Enhanced for modern accessibility
  const showModal = () => {
    if (isOpen) return;
    isOpen = true;
    
    // Capture current scroll position before locking
    scrollY = window.pageYOffset || document.documentElement.scrollTop;
    
    // Set CSS custom properties for scroll position and scrollbar compensation
    document.documentElement.style.setProperty('--scrollbar-width', `${scrollbarWidth}px`);
    document.documentElement.style.setProperty('--scroll-y', `${scrollY}px`);
    
    // Apply body lock (now with position: fixed and preserved scroll position)
    document.body.classList.add('body-locked');
    
    updateAriaStates(true);
    positionModal();
    
    // Remove inert immediately before showing modal - this prevents focus conflicts
    elements.modal.removeAttribute('inert');
    elements.modal.classList.add('share-modal--visible');
    
    cleanupFocusTrap = trapFocus();
  };
  
  const hideModal = () => {
    if (!isOpen) return;
    isOpen = false;
    
    // Immediately restore focus and make modal inert to prevent accessibility issues
    elements.button.focus();
    elements.modal.setAttribute('inert', '');
    
    if (cleanupFocusTrap) {
      cleanupFocusTrap();
      cleanupFocusTrap = null;
    }
    
    updateAriaStates(false);
    elements.modal.classList.remove('share-modal--visible');
    
    // Keep the visual cleanup on a delay for smooth animation
    setTimeout(() => {
      // Clean up positioning properties
      elements.modal.style.removeProperty('--modal-top');
      elements.modal.style.removeProperty('--modal-right');
      elements.modal.style.removeProperty('--drag-offset');
      elements.modal.style.removeProperty('--backdrop-opacity');
      
      // Remove mobile class
      elements.modal.classList.remove('share-modal--mobile');
      
      // Reset copy button state when modal closes
      resetCopyButton();
      
      // Unlock body and restore scroll position
      document.body.classList.remove('body-locked');
      
      // Restore scroll position after body unlock
      window.scrollTo(0, scrollY);
      
      // Clean up CSS custom properties
      document.documentElement.style.removeProperty('--scrollbar-width');
      document.documentElement.style.removeProperty('--scroll-y');
    }, 300);
  };
  
  // Gesture handling for mobile
  const handleGestureStart = (e) => {
    if (!isMobile()) return;
    
    gestureState.isDragging = true;
    gestureState.startY = e.touches[0].clientY;
    
    // Calculate proportional thresholds based on popup height
    gestureState.popupHeight = elements.popup.offsetHeight;
    gestureState.dismissThreshold = gestureState.popupHeight * SWIPE_DISMISS_RATIO;
    gestureState.fadeDistance = gestureState.popupHeight * SWIPE_FADE_RATIO;
    
    elements.modal.classList.add('share-modal--dragging');
  };
  
  const handleGestureMove = (e) => {
    if (!gestureState.isDragging || !isMobile()) return;
    
    gestureState.currentY = e.touches[0].clientY;
    const diffY = Math.max(0, gestureState.currentY - gestureState.startY);
    
    // Update drag offset
    elements.modal.style.setProperty('--drag-offset', `${diffY}px`);
    
    // Update backdrop opacity using proportional fade distance
    const progress = Math.min(diffY / gestureState.fadeDistance, 1);
    const opacity = 0.3 * (1 - progress);
    elements.modal.style.setProperty('--backdrop-opacity', opacity);
  };
  
  const handleGestureEnd = () => {
    if (!gestureState.isDragging || !isMobile()) return;
    
    const diffY = gestureState.currentY - gestureState.startY;
    elements.modal.classList.remove('share-modal--dragging');
    
    // Use proportional dismiss threshold
    if (diffY > gestureState.dismissThreshold) {
      hideModal();
    } else {
      // Reset drag state
      elements.modal.style.removeProperty('--drag-offset');
      elements.modal.style.removeProperty('--backdrop-opacity');
    }
    
    gestureState.isDragging = false;
  };
  
  // Event listeners
  elements.button.addEventListener('click', () => {
    if (hasNativeShare && isMobile()) {
      navigator.share({
        title: document.title,
        url: window.location.href
      }).catch(() => showModal());
    } else {
      showModal();
    }
  });
  
  elements.closeButton?.addEventListener('click', hideModal);
  elements.backdrop?.addEventListener('click', hideModal);
  
  // Share option handlers
  elements.shareOptions?.forEach(option => {
    option.addEventListener('click', () => {
      const platform = option.dataset.platform;
      if (platform) executeShare(platform);
    });
  });
  
  // Touch gesture handlers
  elements.popup.addEventListener('touchstart', handleGestureStart, { passive: true });
  elements.popup.addEventListener('touchmove', handleGestureMove, { passive: true });
  elements.popup.addEventListener('touchend', handleGestureEnd, { passive: true });
  
  // Keyboard handlers
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape' && isOpen) {
      hideModal();
    }
  });
  
  // Resize handler
  window.addEventListener('resize', () => {
    if (isOpen) positionModal();
  });
})();
</script>

<style>
  /* CSS Custom Properties for dynamic values */
  :root {
    --scrollbar-width: 0px;
    --modal-top: 0px;
    --modal-right: 0px;
    --drag-offset: 0px;
    --backdrop-opacity: 0.3;
    --scroll-y: 0px;
    --color-social-facebook: #1877f2;
    --color-social-whatsapp: #25d366;
  }
  
  /* Body lock utility - robust cross-browser solution */
  body.body-locked {
    overflow: hidden !important;
    position: fixed !important;
    top: calc(var(--scroll-y) * -1) !important;
    left: 0 !important;
    right: 0 !important;
    width: 100% !important;
  }
  
  /* Modal base styles - hidden by default with inert for modern accessibility */
  .share-modal {
    position: fixed;
    inset: 0;
    z-index: 50;
    pointer-events: none;
    opacity: 0;
    transition: opacity 300ms ease-out;
  }
  
  /* Modal visible state */
  .share-modal--visible {
    pointer-events: auto;
    opacity: 1;
  }
  
  /* Backdrop */
  .share-backdrop {
    position: absolute;
    inset: 0;
    background-color: rgba(0, 0, 0, var(--backdrop-opacity));
    transition: background-color 300ms ease-out;
  }
  
  /* Popup base styles */
  .share-popup {
    position: absolute;
    background: white;
    border-radius: 0.5rem;
    padding: 2rem 1.5rem 1.5rem;
    box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
    border: 1px solid #e5e7eb;
    width: 320px;
    max-width: 320px;
    top: var(--modal-top);
    right: var(--modal-right);
    transition: transform 300ms cubic-bezier(0.16, 1, 0.3, 1);
  }
  
  /* Mobile positioning and animation */
  .share-modal--mobile .share-popup {
    position: fixed;
    bottom: 0;
    left: 0;
    right: 0;
    top: auto;
    width: 100%;
    max-width: 100%;
    border-radius: 1rem 1rem 0 0;
    padding-bottom: calc(1.5rem + env(safe-area-inset-bottom, 0px));
    transform: translateY(100%);
  }
  
  .share-modal--mobile.share-modal--visible .share-popup {
    transform: translateY(0);
  }
  
  /* Dragging state for mobile */
  .share-modal--mobile.share-modal--dragging .share-popup {
    transition: none;
    transform: translateY(var(--drag-offset));
  }
  
  /* Mobile handle */
  .share-popup__handle {
    display: none;
    width: 2.5rem;
    height: 0.25rem;
    background-color: #d1d5db;
    border-radius: 9999px;
    position: absolute;
    top: 0.625rem;
    left: 50%;
    transform: translateX(-50%);
    z-index: 10;
  }
  
  .share-modal--mobile .share-popup__handle {
    display: block;
  }
  
  /* Close button */
  .share-popup__close {
    position: absolute;
    top: 1rem;
    right: 1rem;
    color: #9ca3af;
    z-index: 10;
    transition: color 200ms ease;
  }
  
  .share-popup__close:hover {
    color: #6b7280;
  }
  
  /* Share options */
  .share-option {
    display: flex;
    flex-direction: column;
    align-items: center;
    padding: 1rem;
    border: 1px solid #e5e7eb;
    border-radius: 0.5rem;
    background: transparent;
    transition: background-color 200ms ease;
  }
  
  .share-option:hover:not(.share-option--copied) {
    background-color: #f3f4f6;
  }
  
  .share-option__icon {
    width: 2.5rem;
    height: 2.5rem;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    margin-bottom: 0.5rem;
    position: relative;
    transition: background-color 200ms ease;
  }
  
  .share-option__icon--facebook {
    background-color: var(--color-social-facebook);
  }
  
  .share-option__icon--whatsapp {
    background-color: var(--color-social-whatsapp);
  }
  
  .share-option__icon--telegram {
    background-color: #0088cc;
  }
  
  .share-option__icon--copy {
    background-color: #4b5563;
  }
  
  /* Copy button state management */
  .share-option--copy .share-option__icon-success {
    opacity: 0;
    position: absolute;
    transform: scale(0.8);
    transition: opacity 200ms ease, transform 200ms ease;
  }
  
  .share-option--copy .share-option__icon-default {
    opacity: 1;
    transition: opacity 200ms ease, transform 200ms ease;
  }
  
  .share-option--copied {
    pointer-events: none;
  }
  
  .share-option--copied .share-option__icon--copy {
    background-color: #10b981;
  }
  
  .share-option--copied .share-option__icon-success {
    opacity: 1;
    transform: scale(1);
  }
  
  .share-option--copied .share-option__icon-default {
    opacity: 0;
    transform: scale(0.8);
  }
  
  /* Status message */
  .share-status {
    opacity: 0;
    transition: opacity 200ms ease;
  }
  
  .share-status--visible {
    opacity: 1;
  }
  
  .share-status--success {
    color: #10b981;
  }
  
  .share-status--error {
    color: #ef4444;
  }
  
  /* Mobile responsive tweaks */
  @media (max-width: 1023px) {
    .share-options {
      max-height: 60vh;
      overflow-y: auto;
    }
  }
</style>