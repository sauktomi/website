---
// src/components/RecipeMetadata.astro
interface TimeProps {
  prepTime?: number;
  cookTime?: number;
  totalTime?: number;
  [key: string]: number | undefined;
}

interface NutrientProps {
  calories?: number | string;
  protein?: string;
  carbs?: string;
  fat?: string;
  [key: string]: number | string | undefined;
}

interface DietaryProps {
  type?: string[];
  allergens?: string[];
  [key: string]: string[] | undefined;
}

interface FlavorProps {
  primary?: string[];
  secondary?: string[];
  texture?: string[];
  [key: string]: string[] | undefined;
}

interface Heading {
  text: string;
  level: number;
  id: string;
}

interface HeadingWithChildren extends Heading {
  children: Heading[];
}

interface Props {
  title: string;
  cuisine?: string;
  category?: string;
  difficulty?: string;
  time?: TimeProps;
  servings?: number;
  tags?: string[];
  source?: string;
  created?: string;
  modified?: string;
  nutrientProfile?: NutrientProps;
  season?: string[];
  occasions?: string[];
  techniques?: string[];
  dietary?: DietaryProps;
  costLevel?: string;
  flavorProfile?: FlavorProps;
  equipment?: string[];
  headings?: Heading[];
}

const { 
  title, 
  cuisine = "", 
  category = "", 
  difficulty = "",
  time = {},
  servings = 0,
  tags = [],
  source = "",
  created = "",
  modified = "",
  nutrientProfile = {},
  season = [],
  occasions = [],
  techniques = [],
  dietary = { type: [], allergens: [] },
  costLevel = "",
  flavorProfile = {},
  equipment = [],
  headings = [],
} = Astro.props;

interface SecondaryItem {
  label: string;
  value: string | number;
  priority: number;
}

const secondaryMetadataItems: SecondaryItem[] = [
  cuisine && { 
    label: "Keittiö", 
    value: cuisine,
    priority: 1
  },
  category && {
    label: "Kategoria",
    value: category,
    priority: 2
  },
  costLevel && { 
    label: "Hinta", 
    value: costLevel,
    priority: 3
  },
  season && season.length > 0 && {
    label: "Kausi",
    value: season.slice(0, 2).join(", "),
    priority: 4
  },
  occasions && occasions.length > 0 && {
    label: "Tilaisuus",
    value: occasions.slice(0, 2).join(", "),
    priority: 5
  }
].filter(Boolean).sort((a, b) => ((a as SecondaryItem)?.priority || 0) - ((b as SecondaryItem)?.priority || 0)) as SecondaryItem[];

const dietaryTypes = dietary?.type && dietary.type.length > 0 ? dietary.type : [];

const flavorItems: string[] = [];
if (flavorProfile?.primary && flavorProfile.primary.length > 0) {
  flavorItems.push(`Maut: ${flavorProfile.primary.slice(0, 2).join(", ")}`);
}

const hasSecondaryContent = secondaryMetadataItems.length > 0 || techniques?.length > 0 || tags?.length > 0 || equipment?.length > 0 || dietaryTypes.length > 0 || flavorItems.length > 0;

const sectionId = `recipe-secondary-${Math.random().toString(36).substring(2, 11)}`;

const cssClasses = {
  container: "space-y-2 text-sm",
  metadataBox: "bg-gray-50 rounded p-3",
  metaItem: "flex items-center gap-2 py-1",
  metaLabel: "text-xs uppercase font-medium text-gray-500 tracking-wider",
  metaValue: "font-medium text-gray-700",
  sectionContainer: "bg-gray-50 rounded p-3",
  sectionTitle: "font-medium text-xs uppercase tracking-wider text-gray-600 mb-2",
  tagsContainer: "flex flex-wrap gap-1",
  tagLink: "inline-block px-2 py-0.5 bg-gray-50 border border-gray-200 rounded text-xs text-gray-600 hover:text-gray-800 hover:border-gray-300 no-underline",
  equipmentItem: "inline-block px-2 py-0.5 bg-gray-50 border border-gray-200 rounded text-xs text-gray-700 hover:text-blue-600 hover:border-blue-600",
  techniqueItem: "inline-block px-2 py-0.5 bg-blue-50 border border-blue-100 rounded text-xs text-blue-700 hover:bg-blue-100",
  dietaryItem: "inline-block px-2 py-0.5 bg-green-50 border border-green-100 rounded text-xs text-green-700",
  flavorItem: "text-xs text-gray-600",
};
---

{hasSecondaryContent && (
  <div class={cssClasses.container}>
    {secondaryMetadataItems.length > 0 && (
      <div class={cssClasses.metadataBox}>
        {secondaryMetadataItems.map(item => (
          <div class={cssClasses.metaItem}>
            <span class={cssClasses.metaLabel}>{item.label}:</span>
            <span class={cssClasses.metaValue}>{item.value}</span>
          </div>
        ))}
      </div>
    )}

    <div class="space-y-2">
      {dietaryTypes.length > 0 && (
        <div class={cssClasses.sectionContainer}>
          <h3 class={cssClasses.sectionTitle}>Ruokavalio</h3>
          <div class="flex flex-wrap gap-1">
            {dietaryTypes.map(type => (
              <span class={cssClasses.dietaryItem}>{type}</span>
            ))}
          </div>
        </div>
      )}

      {flavorItems.length > 0 && (
        <div class={cssClasses.sectionContainer}>
          <h3 class={cssClasses.sectionTitle}>Maku & Rakenne</h3>
          <div>
            {flavorItems.map(item => (
              <div class={cssClasses.flavorItem}>{item}</div>
            ))}
          </div>
        </div>
      )}
      
      {techniques && techniques.length > 0 && (
        <div class={cssClasses.sectionContainer}>
          <h3 class={cssClasses.sectionTitle}>Tekniikat</h3>
          <div class="flex flex-wrap gap-1">
            {techniques.map((technique) => {
              const slug = technique.toLowerCase().replace(/\s+/g, '-');
              return (
                <a 
                  href={`/hakemisto?filter=tekniikat#${slug}`} 
                  class={cssClasses.techniqueItem}
                >
                  {technique}
                </a>
              );
            })}
          </div>
        </div>
      )}
      
      {equipment && equipment.length > 0 && (
        <div class={cssClasses.sectionContainer}>
          <h3 class={cssClasses.sectionTitle}>Välineet</h3>
          <div class="flex flex-wrap gap-1">
            {equipment.map(item => {
              const wikiLinkRegex = /\[\[(.*?)(?:\|(.*?))?\]\]/;
              const match = item.match(wikiLinkRegex);
              
              if (match) {
                const fullPath = match[1];
                const displayText = match[2] || fullPath;
                
                let slug = fullPath.split('|')[0];
                if (slug.includes('(')) {
                  slug = slug.split('(')[0].trim();
                }
                
                const slugified = slug.toLowerCase()
                  .trim()
                  .replace(/\s+/g, '-')
                  .replace(/[^a-z0-9äöåÄÖÅ\-]+/g, '')
                  .replace(/\-\-+/g, '-')
                  .replace(/^-+/, '')
                  .replace(/-+$/, '');
                  
                const href = `/hakemisto#${slugified}`;
                
                return (
                  <a href={href} class={cssClasses.equipmentItem} data-wiki-ref={slugified}>
                    {displayText}
                  </a>
                );
              }
              
              return (
                <span class={cssClasses.equipmentItem}>{item}</span>
              );
            })}
          </div>
        </div>
      )}
      
      {tags && tags.length > 0 && (
        <div class={cssClasses.sectionContainer}>
          <h3 class={cssClasses.sectionTitle}>Avainsanat</h3>
          <div class={cssClasses.tagsContainer}>
            {tags.slice(0, 8).map(tag => (
              <a href={`/tags/${tag}`} class={cssClasses.tagLink}>
                #{tag}
              </a>
            ))}
            {tags.length > 8 && (
              <button 
                id={`show-more-tags-${sectionId}`}
                class="inline-block px-2 py-0.5 bg-gray-100 border border-gray-200 rounded text-xs text-gray-600 hover:bg-gray-200"
                data-full-tags={JSON.stringify(tags.slice(8))}
              >
                +{tags.length - 8}
              </button>
            )}
          </div>
          {tags.length > 8 && (
            <div id={`extra-tags-${sectionId}`} class="hidden mt-1">
              <div class={cssClasses.tagsContainer}>
                {tags.slice(8).map(tag => (
                  <a href={`/tags/${tag}`} class={cssClasses.tagLink}>
                    #{tag}
                  </a>
                ))}
              </div>
            </div>
          )}
        </div>
      )}
    </div>
  </div>
)}

<!-- Include recipe metadata script -->
<script src="/src/scripts/recipe-metadata.js" defer></script>