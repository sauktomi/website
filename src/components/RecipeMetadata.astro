---
// src/components/RecipeMetadata.astro
interface Props {
  title: string;
  cuisine?: string;
  category?: string;
  tags?: string[];
  season?: string[];
  occasions?: string[];
  techniques?: string[];
  dietary?: { type?: string[] };
  costLevel?: string;
  flavorProfile?: { primary?: string[] };
  equipment?: string[];
  created?: string;
  modified?: string;
}

const { 
  cuisine = "", 
  category = "", 
  tags = [],
  season = [],
  occasions = [],
  techniques = [],
  dietary = { type: [] },
  costLevel = "",
  flavorProfile = {},
  equipment = [],
  created,
  modified,
} = Astro.props;

interface MetadataItem {
  label: string;
  value: string;
  priority: number;
  linkType?: 'category' | 'techniques' | 'search';
}

// Helper function to create metadata items
const createItem = (label: string, value: string | string[], priority: number, linkType?: 'category' | 'techniques' | 'search'): MetadataItem | null => {
  if (!value || (Array.isArray(value) && value.length === 0)) return null;
  const displayValue = Array.isArray(value) ? value.slice(0, Array.isArray(value) && value.length > 2 ? 2 : 3).join(", ") : value;
  return { label, value: displayValue, priority, linkType };
};

// Primary metadata (always visible)
const primaryItems = [
  createItem("Kategoria", category, 1, 'category'),
  createItem("Keittiö", cuisine, 2, 'search'),
  createItem("Tilaisuus", occasions, 3, 'search'),
  createItem("Kausi", season, 4, 'search'),
  createItem("Ruokavalio", dietary.type || [], 5, 'search'),
  createItem("Maut", flavorProfile.primary || [], 6, 'search')
].filter(Boolean).sort((a, b) => a!.priority - b!.priority) as MetadataItem[];

// Secondary metadata (collapsible)
const secondaryItems = [
  createItem("Hinta", costLevel, 1),
  createItem("Välineet", equipment, 2),
  createItem("Tekniikat", techniques, 3, 'techniques'),
  createItem("Avainsanat", tags, 4, 'search')
].filter(Boolean).sort((a, b) => a!.priority - b!.priority) as MetadataItem[];

const hasPrimary = primaryItems.length > 0;
const hasSecondary = secondaryItems.length > 0;
const hasMetadata = hasPrimary || hasSecondary;

const sectionId = `recipe-secondary-${Math.random().toString(36).substring(2, 11)}`;
---

{hasMetadata && (
  <section class="recipe-metadata">
    {hasSecondary && (
      <div class="metadata-toggle">
        <button 
          id={`toggle-metadata-${sectionId}`}
          data-section-id={sectionId}
          class="toggle-btn"
          aria-label="Näytä lisätiedot"
        >
          <span class="toggle-text">Lisätiedot</span>
        </button>
      </div>
    )}
    
    <div class="metadata-content">
      {hasPrimary && (
        <div class="metadata-grid">
          {primaryItems.map(item => {
            const values = item.value.split(', ');
            const hasLinks = item.linkType;
            
            return (
              <div class="metadata-item">
                <span class="metadata-label">{item.label}:</span>
                <span class="metadata-value">
                  {hasLinks ? values.map((value, index) => (
                    <>
                      {index > 0 && ', '}
                      <a 
                        href={`/reseptit/?${item.linkType}=${encodeURIComponent(value.trim().toLowerCase())}`}
                        class="metadata-link"
                      >
                        {value.trim()}
                      </a>
                    </>
                  )) : item.value}
                </span>
              </div>
            );
          })}
        </div>
      )}

      {hasSecondary && (
        <div id={`secondary-metadata-${sectionId}`} data-section-id={sectionId} class="secondary-metadata hidden">
          <div class="metadata-grid">
            {secondaryItems.map(item => {
              const values = item.value.split(', ');
              const hasLinks = item.linkType;
              
              return (
                <div class="metadata-item">
                  <span class="metadata-label">{item.label}:</span>
                  <span class="metadata-value">
                    {hasLinks ? values.map((value, index) => (
                      <>
                        {index > 0 && ', '}
                        <a 
                          href={`/reseptit/?${item.linkType}=${encodeURIComponent(value.trim().toLowerCase())}`}
                          class="metadata-link"
                        >
                          {value.trim()}
                        </a>
                      </>
                    )) : item.value}
                  </span>
                </div>
              );
            })}
          </div>
        </div>
      )}
      
      {(created || modified) && (
        <div class="metadata-footer">
          {created && <span>Luotu: {new Date(created).toLocaleDateString('fi-FI')}</span>}
          {modified && modified !== created && (
            <span>{created && ' • '}Muokattu: {new Date(modified).toLocaleDateString('fi-FI')}</span>
          )}
        </div>
      )}
    </div>
  </section>
)}

<style>
  .recipe-metadata {
    display: flex;
    font-size: 0.875rem;
    background-color: var(--color-secondary-light);
    border-radius: 0.375rem;
    margin-top: 4rem;
    max-width: 44rem;
    border: 1px solid var(--color-secondary);
  }

  .metadata-toggle {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    border-right: 1px solid var(--color-secondary);
    min-width: 60px;
  }

  @media (max-width: 768px) {
    .recipe-metadata {
      flex-direction: row-reverse;
      max-width: 40rem;
      margin-left: auto;
      margin-right: auto;
    }
    .metadata-toggle {
      border-left: 1px solid var(--color-secondary);
      border-right: none;
    }
  }

  .toggle-btn {
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 0.75rem;
    font-weight: 500;
    color: var(--color-secondary-dark);
    transition: color 0.2s;
    cursor: pointer;
    border: none;
    background: none;
  }

  .toggle-btn:hover {
    color: var(--color-primary-dark);
  }

  .toggle-text {
    transform: rotate(-90deg);
    width: 4.5rem;
    text-transform: uppercase;
    text-align: center;
  }

  .metadata-content {
    flex: 1;
    padding: 0.75rem;
    padding-bottom: 0;
  }

  .metadata-grid {
    display: grid;
    grid-template-columns: 1fr;
    gap: 0.25rem 1rem;
  }

  @media (min-width: 768px) {
    .metadata-grid {
      grid-template-columns: 1fr 1fr;
    }
  }

  .metadata-item {
    display: flex;
    gap: 0.5rem;
    padding: 0.125rem 0;
    align-items: baseline;
  }

  .metadata-label {
    font-size: 0.75rem;
    text-transform: uppercase;
    font-weight: 500;
    color: var(--color-secondary-dark);
    letter-spacing: 0.05em;
  }

  .metadata-value {
    font-weight: 500;
    color: var(--color-primary-accent);
  }

  .metadata-link {
    color: var(--color-primary-accent);
    text-decoration: none;
    transition: color 0.2s;
  }

  .metadata-link:hover {
    text-decoration: underline;
    color: var(--color-primary-dark);
  }

  .secondary-metadata {
    display: none;
    margin-top: 0.75rem;
    padding-top: 0.75rem;
    border-top: 1px solid var(--color-secondary);
  }

  .secondary-metadata.hidden {
    display: none;
  }

  .secondary-metadata.block {
    display: block;
  }

  .metadata-footer {
    font-size: 0.75rem;
    color: var(--color-secondary-accent);
    margin-top: 0.75rem;
    padding: 0.5rem 0;
    border-top: 1px solid var(--color-secondary);
  }
</style>

