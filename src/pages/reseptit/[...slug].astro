---
/**
 * Individual Recipe Page
 * 
 * Dynamic route for displaying individual recipe content with enhanced
 * features like kitchen timer, ingredient popovers, and interactive elements.
 * 
 * Features:
 * - Full recipe content with structured sections
 * - Kitchen timer integration with sound alerts
 * - Ingredient popovers with detailed information
 * - Progress tracking for recipe steps
 * - Mobile-optimized interface with bottom toolbar
 * - SEO optimization with structured data
 * - View transitions for smooth navigation
 * 
 * Content Structure:
 * - Recipe metadata (time, difficulty, servings)
 * - Ingredients list with popover information
 * - Step-by-step instructions
 * - Cooking tips and notes
 * - Related recipes and techniques
 * 
 * Interactive Elements:
 * - Kitchen timer with multiple preset times
 * - Ingredient information popovers
 * - Step progress tracking
 * - Mobile-friendly controls
 * 
 * @author Tomi
 * @version 2.0.0
 */

// src/pages/reseptit/[...slug].astro
import { getCollection } from 'astro:content';
import Layout from '../../layouts/Layout.astro';
import { enhanceRecipeData, createRecipeNumberRegistry, setRecipeNumberRegistry, type EnhancedRecipeData } from '../../utils/ruoanlaitto-data.ts';

export async function getStaticPaths() {
  const reseptit = await getCollection('Reseptit');
  
  // Create and set the recipe number registry for global access (needed for UI display)
  const numberRegistry = createRecipeNumberRegistry(reseptit);
  setRecipeNumberRegistry(numberRegistry);
  
  // Process all recipes with enhanced data at build time
  const enhancedRecipes = await Promise.all(
    reseptit.map(async (entry) => {
      const enhancedData = await enhanceRecipeData(entry);
      return {
        entry,
        enhancedData,
      };
    })
  );
  
  const paths: Array<{ params: { slug: string }; props: { enhancedData: EnhancedRecipeData } }> = [];
  
  enhancedRecipes.forEach(({ entry, enhancedData }) => {
    // Extract base slug without category
    const baseSlug = entry.slug.includes('/') ? entry.slug.split('/').pop() || entry.slug : entry.slug;
    
    // Only add the canonical slug-based route
    // Number-based URLs will be handled by middleware redirects
    paths.push({
      params: { slug: baseSlug },
      props: { enhancedData },
    });
  });
  
  return paths;
}

const { enhancedData }: { enhancedData: EnhancedRecipeData } = Astro.props;

// All data is now pre-processed and ready to use
const {
  title,
  annokset,
  dietary,
  mise_en_place,
  image,
  description,
  processedTime,
  formattedTime,
  difficulty,
  groupedHeadings,
  instructionSections,
  Content
} = enhancedData;

// For now, always enable ingredient popup for recipe pages
// TODO: Could be optimized to detect ingredient links at build time
const hasIngredientLinks = true;

import MobileInfobar from '../../components/MobileInfobar.astro';

// Define mobile buttons for recipe pages
const mobileButtons = [
  {
    id: "kitchen-timer",
    className: "kitchen-timer-button",
    ariaLabel: "Keittiöajastin",
    title: "Keittiöajastin",
    svgContent: `<svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"/>
    </svg>`,
    onClick: "document.getElementById('timer-trigger').click();"
  },
  {
    id: "step-progress",
    ariaLabel: "Reseptin edistyminen",
    title: "Reseptin edistyminen", 
    svgContent: `<span id="progress-fraction-mobile" class="text-xs font-bold">0/0</span>`,
  }
];
---

<Layout title={title} tocHeadings={groupedHeadings} needsWikiLinks={true}>
  <!-- Add canonical URL for SEO -->
  <link slot="head" rel="canonical" href={enhancedData.canonicalUrl} />

  <div class="main-grid">
    <div class="flex md:flex-row gap-6 justify-center mr-0 min-md:-mr-6 lg:-mr-8">
      
      <!-- Main content area -->
      <div id="recipe-main" class="content-main prose md:prose-xl xl:prose-2xl dark:prose-invert">
        <!-- Enhanced recipe header -->
        <header>
            <div class="header-container text-secondary-accent hover:text-primary-dark">
              <span class="item-number">
                #{enhancedData.formattedRecipeNumber}
              </span>

              <!-- Dietary information -->
              {dietary && (
                Array.isArray(dietary) 
                  ? dietary.length > 0 
                  : dietary.type?.length > 0
              ) && (
                <div class="dietary-tags">
                  {(Array.isArray(dietary) ? dietary : dietary.type || []).map((diet: string) => (
                    <span class="dietary-tag">
                      {diet}
                    </span>
                  ))}
                </div>
              )}
              
              <button onclick="window.print()" class="p-2 text-secondary-accent hover:text-primary-dark" aria-label="Tulosta resepti">
                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 17h2a2 2 0 002-2v-4a2 2 0 00-2-2H5a2 2 0 00-2 2v4a2 2 0 002 2h2m2 4h6a2 2 0 002-2v-4a2 2 0 00-2-2H9a2 2 0 00-2 2v4a2 2 0 002 2zm8-12V5a2 2 0 00-2-2H9a2 2 0 00-2 2v4h10z"/>
                </svg>
              </button>
            </div>
          <h1 class="recipe-title">
            {title}
          </h1>
          
          <!-- Essential info with better spacing -->
          <div class="recipe-essentials">
            <div class="recipe-meta-info">
              {processedTime && (
                <div class="recipe-meta-item">
                  <span>
                    {formattedTime?.totalTime}
                  </span>
                </div>
              )}
              
              {difficulty && (
                <div class="recipe-meta-item">
                  <span class={`font-medium ${difficulty.color}`}>{difficulty.text}</span>
                </div>
              )}
              
              {annokset && (
                <div class="recipe-meta-item">
                  <span>{annokset}</span>
                </div>
              )}
          </div>

          <!-- Recipe description -->
          {description && (
            <div class="recipe-description">
              <p class="lead">
                {Array.isArray(description) 
                ? description[0] 
                : description
                }
              </p>
            </div>
          )}

          <!-- Hero image with skeleton loading to prevent layout shift -->
          <figure class="recipe-hero-image">
            <div class="image-wrapper">
              <div class="image-skeleton"></div>
              {image && (
                <img 
                  src={image} 
                  alt={enhancedData.metadataProps?.imageAlt || enhancedData.metadataProps?.imageCaption || title} 
                  class="image-actual"
                  loading="lazy"
                  decoding="async"
                  onload="this.parentNode.classList.add('loaded')"
                  onerror="this.parentNode.classList.add('loaded')"
                />
              )}
            </div>
            {enhancedData.metadataProps?.imageCaption && (
              <figcaption>
                {enhancedData.metadataProps.imageCaption}
              </figcaption>
            )}
          </figure>
        </header>
        
        <!-- Recipe content with enhanced typography -->
        <div class="recipe-body max-w-none">
          <Content />
        </div>
        
      </div>

      <!-- Sidebar -->
      <aside id="recipe-sidebar" class="content-sidebar hidden md:block w-3xs">
        <div class="sticky top-4 recipe-sidebar">
          <div class="sidebar-card sidebar-navigation">
            <h4 class="sidebar-card-header">Pikasiirtymä</h4>
            <div class="sidebar-card-content">
              <ul>
                {groupedHeadings.filter(heading => !heading.text.toLowerCase().includes('valmistus') && !heading.text.toLowerCase().includes('vinkit') && !heading.text.toLowerCase().includes('liitteet')).map((heading) => (
                  <li>
                    <a href={`#${heading.id}`}>
                      {heading.text}
                    </a>
                  </li>
                ))}
                {/* Ainekset link */}
                <li>
                  <a href="#ainekset">
                    Ainekset
                  </a>
                </li>
                {/* Ohje link */}
                <li>
                  <a href="#ohje">
                    Ohje
                  </a>
                </li>
                {/* Instruction sections */}
                {instructionSections.length > 0 && instructionSections.map((section, index) => (
                  <li>
                    <a href={`#${section.id}`}>
                      {index + 1}. {section.text}
                    </a>
                  </li>
                ))}
                {/* Vinkit and Liitteet side by side */}
                <li class="flex gap-4">
                  {groupedHeadings.filter(heading => heading.text.toLowerCase().includes('vinkit')).map((heading) => (
                    <a href={`#${heading.id}`} class="flex-1">
                      {heading.text}
                    </a>
                  ))}
                  {groupedHeadings.filter(heading => heading.text.toLowerCase().includes('liitteet')).map((heading) => (
                    <a href={`#${heading.id}`} class="flex-1">
                      {heading.text}
                    </a>
                  ))}
                </li>
              </ul>
            </div>
          </div>
          
          {mise_en_place && mise_en_place.length > 0 && (
            <div id="mise-en-place" class="sidebar-card">
              <h4 class="sidebar-card-header">Mise en place</h4>
              <div id="mise-content" class="sidebar-card-content">
                <p>Valmistele ainekset ja välineet.</p>
              </div>
            </div>
          )}
          
          {/* Unified timer interface */}
          <div class="sidebar-card">
            <h4 class="sidebar-card-header">Keittiöajastin</h4>
            
            <div class="sidebar-card-content">
              {/* Timer trigger button */}
              <button 
                id="timer-trigger"
                popovertarget="timer-popover"
                class="timer-trigger-btn w-full flex items-center justify-center gap-2 p-3 bg-secondary-light hover:bg-secondary transition-colors duration-200 rounded-lg border border-secondary-light focus-visible:outline-2 focus-visible:outline-offset-2"
                style="outline-color: var(--color-primary-accent);"
                aria-label="Avaa keittiöajastin"
                anchor-name="--timer-anchor"
              >
                <span class="timer-trigger-text">Avaa ajastin</span>
              </button>
            </div>
          </div>
        </div>
      </aside>
      
    </div>
    
      <!-- Contact section -->
      <section class="contact-section">
        <div class="text-center">
          <h2>
            Kysyttävää? Palautetta?
          </h2>

          <a href="mailto:null" class="contact-button">
            Ota yhteyttä
          </a>
          <p class="contact-description">
            Kuvaile aiheesi selkeästi ja yksinkertaisesti, jotta varmasti saat vastauksen.
          </p>
        </div>
      </section>

  </div>


  
  <!-- Unified Timer Popover -->
  <div 
    id="timer-popover"
    popover="auto"
    class="timer-popover timer-popover-positioned bg-primary-light border border-secondary rounded-xl shadow-prominent max-w-md w-full max-h-[80vh] overflow-hidden backdrop-blur-sm popover-backdrop popover-smooth-transition"
    role="dialog"
    aria-labelledby="timer-popover-title"
    position-anchor="--timer-anchor"
    position-area="center"
  >
    <!-- Popover Header -->
    <div class="popover-header flex items-center justify-between p-4 border-b border-secondary bg-secondary-light">
      <h2 id="timer-popover-title" class="popover-title text-lg font-semibold text-primary-dark m-0">
        Keittiöajastin
      </h2>
      <button 
        class="popover-close-btn p-2 rounded-lg hover:bg-secondary transition-colors duration-200 focus-visible:outline-2 focus-visible:outline-offset-2"
        style="outline-color: var(--color-primary-accent);"
        popovertarget="timer-popover"
        popovertargetaction="hide"
        aria-label="Sulje"
      >
        <svg class="popover-close-icon size-5 text-secondary-accent" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
        </svg>
      </button>
    </div>

    <!-- Popover Content -->
    <div class="popover-content p-4 space-y-4">
      <!-- Timer display/input -->
      <div class="flex items-center justify-center gap-1 mb-4 bg-secondary-light p-3 rounded-lg border border-secondary-light">
        <div class="flex-1 text-center">
          <input id="timer-minutes-input" type="number" min="0" max="999" value="5" class="w-full text-2xl font-mono font-bold text-center bg-transparent border-none rounded text-primary-dark focus:outline-none focus:bg-secondary-light focus:border-secondary">
        </div>
        <span class="text-2xl font-mono font-bold text-primary-dark">:</span>
        <div class="flex-1 text-center">
          <input id="timer-seconds-input" type="number" min="0" max="59" value="00" class="w-full text-2xl font-mono font-bold text-center bg-transparent border-none rounded text-primary-dark focus:outline-none focus:bg-secondary-light focus:border-secondary">
        </div>
      </div>
      
      <!-- Timer slider -->
      <div id="timer-slider-container" class="mb-4 w-full">
        <input 
          id="timer-slider" 
          type="range" 
          min="5" 
          max="90" 
          step="1" 
          value="5" 
          class="w-full h-2 bg-secondary-light rounded-lg appearance-none cursor-pointer slider"
          title="Valitse aika 5-90 minuutin väliltä"
        >
        <div id="timer-slider-labels" class="flex justify-between text-xs text-primary-dark mt-1">
          <span>5 min</span>
          <span>45 min</span>
          <span>1h 30min</span>
        </div>
      </div>
      
      <!-- Timer controls -->
      <div class="flex flex-col gap-2 justify-center items-center w-full timer-controls-container">
        <button id="start-timer" class="timer-btn timer-start-btn" title="Käynnistä ajastin">
          <svg class="w-3 h-3 mr-1" fill="currentColor" viewBox="0 0 24 24">
            <path d="M8 5v14l11-7z"/>
          </svg>
          Käynnistä
        </button>
        <button id="pause-timer" class="timer-btn timer-pause-btn" title="Pysäytä ajastin" style="display: none;">
          <svg class="w-3 h-3 mr-1" fill="currentColor" viewBox="0 0 24 24">
            <path d="M6 19h4V5H6v14zm8-14v14h4V5h-4z"/>
          </svg>
          Pysäytä
        </button>
        <button id="reset-timer" class="timer-btn timer-reset-btn" title="Nollaa ajastin" style="display: none;">
          <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"/>
          </svg>
        </button>
      </div>
    </div>
  </div>
  
  <!-- Mobile Infobar for recipe pages -->
  <MobileInfobar buttons={mobileButtons} />
	</Layout>



<!-- Modular recipe functionality - Non-blocking loading -->
<script>
  import '../../scripts/timer.ts';
  import '../../scripts/info-mode-manager.ts';
  import '../../scripts/recipe-interactions.ts';
</script>

