---
/**
 * Individual Recipe Page
 * 
 * Dynamic route for displaying individual recipe content with enhanced
 * features like kitchen timer, ingredient popovers, and interactive elements.
 * 
 * Features:
 * - Full recipe content with structured sections
 * - Kitchen timer integration with sound alerts
 * - Ingredient popovers with detailed information
 * - Progress tracking for recipe steps
 * - Mobile-optimized interface with bottom toolbar
 * - SEO optimization with structured data
 * - View transitions for smooth navigation
 * 
 * Content Structure:
 * - Recipe metadata (time, difficulty, servings)
 * - Ingredients list with popover information
 * - Step-by-step instructions
 * - Cooking tips and notes
 * - Related recipes and techniques
 * 
 * Interactive Elements:
 * - Kitchen timer with multiple preset times
 * - Ingredient information popovers
 * - Step progress tracking
 * - Mobile-friendly controls
 * 
 * @author Tomi
 * @version 2.0.0
 */

// src/pages/reseptit/[...slug].astro
import { getCollection } from 'astro:content';
import Layout from '../../layouts/Layout.astro';
import RecipeMetadata from '../../components/RecipeMetadata.astro';
import { enhanceRecipeData, createRecipeNumberRegistry, setRecipeNumberRegistry, type EnhancedRecipeData } from '../../utils/ruoanlaitto-data.ts';
import { getItemTypeAndCategory } from '../../remark-recipe-links.mjs';

export async function getStaticPaths() {
  const reseptit = await getCollection('Reseptit');
  
  // Create and set the recipe number registry for global access (needed for UI display)
  const numberRegistry = createRecipeNumberRegistry(reseptit);
  setRecipeNumberRegistry(numberRegistry);
  
  // Process all recipes with enhanced data at build time
  const enhancedRecipes = await Promise.all(
    reseptit.map(async (entry) => {
      const enhancedData = await enhanceRecipeData(entry);
      return {
        entry,
        enhancedData,
      };
    })
  );
  
  const paths: Array<{ params: { slug: string }; props: { enhancedData: EnhancedRecipeData } }> = [];
  
  enhancedRecipes.forEach(({ entry, enhancedData }) => {
    // Extract base slug without category
    const baseSlug = entry.slug.includes('/') ? entry.slug.split('/').pop() || entry.slug : entry.slug;
    
    // Only add the canonical slug-based route
    // Number-based URLs will be handled by middleware redirects
    paths.push({
      params: { slug: baseSlug },
      props: { enhancedData },
    });
  });
  
  return paths;
}

const { enhancedData }: { enhancedData: EnhancedRecipeData } = Astro.props;

// All data is now pre-processed and ready to use
const {
  title,
  annokset,
  dietary,
  mise_en_place,
  ingredients,
  image,
  description,
  processedTime,
  formattedTime,
  difficulty,
  groupedHeadings,
  instructionSections,
  Content,
  // Additional metadata fields
  cuisine,
  category,
  cost_level,
  season,
  occasion,
  techniques,
  equipment,
  flavor_profile,
  luotu,
  muokattu,
  metadataProps
} = enhancedData;

// Access additional fields through metadataProps
const subtitle = metadataProps?.subtitle;
const status = metadataProps?.status;


---

<Layout 
	title={title}
>
  <!-- Add canonical URL for SEO -->
  <link slot="head" rel="canonical" href={enhancedData.canonicalUrl} />

  <!-- Recipe-specific overlay navigation (appears on scroll) -->
  <div id="recipe-overlay-nav" class="recipe-overlay-nav">
    <div class="overlay-nav-left">
      <button 
        id="timer-btn"
        popovertarget="timer-popover"
        class="top-nav-btn timer-btn"
        aria-label="Keittiöajastin"
      >
        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"/>
        </svg>
        <span class="timer-text"></span>
      </button>
    </div>

    <div class="overlay-nav-center">
      <a href="#top" class="overlay-nav-title">{title}</a>
    </div>

    <div class="overlay-nav-right">
      <button 
        id="navigation-toggle"
        popovertarget="navigation-popover"
        class="top-nav-btn toggle-btn"
        aria-label="Näytä pikasiirtymä"
      >
        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <circle cx="5" cy="7" r="1.5" />
          <rect x="9" y="6" width="10" height="2" rx="1" />
          <circle cx="5" cy="12" r="1.5" />
          <rect x="9" y="11" width="10" height="2" rx="1" />
          <circle cx="5" cy="17" r="1.5" />
          <rect x="9" y="16" width="10" height="2" rx="1" />
        </svg>
      </button>
    </div>
  </div>

  <div class="main-grid">
    <!-- Main content area -->
    <div id="recipe-main" class="content-main ml-auto prose md:prose-xl xl:prose-2xl dark:prose-invert">
      <!-- Enhanced recipe header -->
      <header class="recipe-header">
          <div class="header-container">
            <div class="header-meta">
              <span class="item-number">
                #{enhancedData.formattedRecipeNumber}
              </span>

              <!-- Dietary information -->
              {dietary && (
                Array.isArray(dietary) 
                  ? dietary.length > 0 
                  : dietary.type?.length > 0
              ) && (
                <div class="dietary-tags">
                  {(Array.isArray(dietary) ? dietary : dietary.type || []).map((diet: string, index: number, array: string[]) => (
                    <>
                      <a href={`/reseptit/?search=${encodeURIComponent(diet.toLowerCase())}`} class="dietary-tag">{diet}</a>{index < array.length - 1 && ','}
                    </>
                  ))}
                </div>
              )}
            </div>
            
            <button class="print-button" aria-label="Tulosta resepti">
              <svg class="print-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 17h2a2 2 0 002-2v-4a2 2 0 00-2-2H5a2 2 0 00-2 2v4a2 2 0 002 2h2m2 4h6a2 2 0 002-2v-4a2 2 0 00-2-2H9a2 2 0 00-2 2v4a2 2 0 002 2zm8-12V5a2 2 0 00-2-2H9a2 2 0 00-2 2v4h10z"/>
              </svg>
            </button>
          </div>
        <h1>
          {title}
        </h1>
        
        {/* Subtitle display */}
        {subtitle && (
          <p class="recipe-subtitle text-lg text-secondary-accent font-medium">
            {subtitle}
          </p>
        )}
        
        {/* Status information for draft/development recipes */}
        {status && status !== 'published' && (
          <div class="recipe-status">
            <span class="status-badge status-{status.toLowerCase()}">
              {status === 'draft' && 'Luonnos'}
              {status === 'template-update' && 'Päivitys'}
              {status === 'final' && 'Lopullinen'}
            </span>
          </div>
        )}
        
        <!-- Essential info with better spacing -->
        <div class="recipe-essentials">
          <div class="recipe-meta-info">
            {processedTime && (
              <div class="recipe-meta-item">
                <svg class="size-5 inline md:mx-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"/>
                </svg>
                <span class="meta-text">
                  {formattedTime?.totalTime}
                </span>
              </div>
            )}
            
            {difficulty && (
              <div class="recipe-meta-item">
                <span class={`meta-text ${difficulty.color}`}>{difficulty.text}</span>
              </div>
            )}
            
            {annokset && (
              <div class="recipe-meta-item">
                <span class="meta-text">{annokset}</span>
              </div>
            )}
        </div>

        <!-- Recipe description -->
        {description && (
          <div class="recipe-description-container">
            <div class="description-content">
                            {Array.isArray(description) ? (
                <>
                  <p class="recipe-lead">
                    {description[0]}
                    {Array.isArray(description) && description.length > 1 && (
                      <button 
                        class="read-more-btn"
                        aria-label="Näytä lisää kuvausta"
                      >
                        <span class="toggle-text">+</span>
                      </button>
                    )}
                  </p>
                  {description.length > 1 && (
                    <div class="description-extra hidden">
                      {description.slice(1).map((paragraph, index) => {
                        const subheaders = ['Esenssi', 'Kokemus'];
                        return (
                          <div class="description-paragraph">
                            <h4 class="description-subheader">{subheaders[index]}</h4>
                            <p class="recipe-lead">{paragraph}</p>
                          </div>
                        );
                      })}
                    </div>
                  )}
                </>
              ) : (
                <p class="recipe-lead">{description}</p>
              )}
            </div>
          </div>
        )}

        <style>
          .recipe-description-container {
            max-width: 50rem;
            position: relative;
          }

          .read-more-btn {
            float: right;
            width: 2.5rem;
            height: 2.5rem;
            font-size: 1.75rem;
            color: var(--color-secondary-accent);
            margin-left: 1rem;
          }

          .description-content {
            max-height: 55svh;
            overflow-y: auto;
            padding-right: 1rem;
            scrollbar-width: thin;
            scrollbar-color: var(--color-secondary) transparent;
          }

          .description-content::-webkit-scrollbar {
            width: 6px;
          }

          .description-content::-webkit-scrollbar-track {
            background: transparent;
          }

          .description-content::-webkit-scrollbar-thumb {
            background-color: var(--color-secondary-light);
            border-radius: 3px;
          }

          .description-content::-webkit-scrollbar-thumb:hover {
            background-color: var(--color-secondary);
          }

          .description-subheader {
            font-size: 1.33rem;
            font-weight: 600;
            color: var(--color-secondary-dark);
            text-transform: uppercase;
            letter-spacing: 0.05em;
            margin-bottom: 0.5rem;
            margin-top: 0;
          }
        </style>

        <!-- Hero image with eager loading for better performance -->
        <figure class="recipe-hero-image">
          <div class="image-wrapper">
            <div class="image-skeleton"></div>
            {image && (
              <img 
                src={image} 
                alt={enhancedData.metadataProps?.imageAlt || enhancedData.metadataProps?.imageCaption || title} 
                class="image-actual"
                loading="eager"
                decoding="sync"
                fetchpriority="high"
                onload="this.parentNode.classList.add('loaded')"
                onerror="this.parentNode.classList.add('loaded')"
              />
            )}
          </div>
          {enhancedData.metadataProps?.imageCaption && (
            <figcaption class="image-caption">
              {enhancedData.metadataProps.imageCaption}
            </figcaption>
          )}
        </figure>
      </header>
      
      <!-- Recipe content with enhanced typography -->
      <div class="recipe-body">
        <!-- Valmistus section with ingredients and mise en place -->
        {(mise_en_place && mise_en_place.length > 0) || (ingredients && ingredients.length > 0) ? (
          <section id="valmistus-section" class="valmistus-section">
            <h2 id="valmistus">Valmistus</h2>
            
            <!-- Mise en place -->
            {mise_en_place && mise_en_place.length > 0 && (
              <div class="mise-en-place-section">
                <h3 id="mise-en-place">Mise en place</h3>
                <ul class="task-list">
                  {mise_en_place.map((task) => (
                    <li class="task-list-item">
                      <input type="checkbox" disabled class="task-checkbox" />
                      <span class="task-text">{task}</span>
                    </li>
                  ))}
                </ul>
              </div>
            )}
            
            <!-- Ingredients -->
            {ingredients && ingredients.length > 0 && (
              <div class="ingredients-section">
                <h3 id="ainekset">Ainekset</h3>
                {(() => {
                  // Check if we have sectioned ingredients or flat ingredients
                  const hasSections = ingredients.some(ingredient => 'section' in ingredient && 'items' in ingredient);
                  
                  if (hasSections) {
                    // New sectioned format
                    return ingredients.map((ingredientGroup) => {
                      if ('section' in ingredientGroup && 'items' in ingredientGroup) {
                        return (
                          <div class="ingredient-group">
                            <h4 class="ingredient-section-title">{ingredientGroup.section}</h4>
                            <ul class="ingredients-list">
                              {ingredientGroup.items.map((ingredient) => {
                                const { name, amount, unit, notes } = ingredient;
                                const itemInfo = getItemTypeAndCategory(name);
                                
                                if (!itemInfo) {
                                  return (
                                    <li class="ingredient-item">
                                      <span class="ingredient-fallback">
                                        {amount && <span class="ingredient-amount">{amount}</span>}
                                        {unit && <span class="ingredient-unit"> {unit}</span>}
                                        <span class="ingredient-name wiki-link wiki-link--unavailable"> {name}</span>
                                        {notes && <span class="ingredient-notes"> ({notes})</span>}
                                      </span>
                                    </li>
                                  );
                                }
                                
                                const itemType = itemInfo.type;
                                const itemCategory = itemInfo.category;
                                const itemId = itemInfo.id;
                                const popoverId = `popover-${itemId}-${itemType}`;
                                const triggerId = `trigger-${itemId}-${itemType}`;
                                
                                return (
                                  <li class="ingredient-item">
                                    {amount && <span class="ingredient-amount">{amount}</span>}
                                    {unit && <span class="ingredient-unit">{unit}</span>}
                                    <button 
                                      id={triggerId}
                                      popovertarget={popoverId}
                                      class={`ingredient-popover-trigger wiki-link wiki-link--${itemInfo ? 'available' : 'unavailable'} wiki-link--${itemType}`}
                                      data-item-id={itemId}
                                      data-item-type={itemType}
                                      data-category={itemCategory}
                                      aria-label={`Näytä tiedot: ${name}`}
                                    >
                                      <span class="ingredient-name" view-transition-name={`popover-title-${itemId}`}>{name}</span>
                                    </button>
                                    {notes && <span class="ingredient-notes"> ({notes})</span>}
                                    <div 
                                      id={popoverId}
                                      popover="auto"
                                      class="ingredient-popover"
                                      role="dialog"
                                      aria-labelledby={`${popoverId}-title`}
                                      data-item-id={itemId}
                                      data-item-type={itemType}
                                      data-category={itemCategory}
                                    >
                                      <div class="popover-header">
                                        <h2 id={`${popoverId}-title`} class="popover-title">
                                          <span class="popover-title-text" view-transition-name={`popover-title-${itemId}`}>Ladataan...</span>
                                        </h2>
                                        <button 
                                          class="popover-close-btn"
                                          popovertarget={popoverId}
                                          popovertargetaction="hide"
                                          aria-label="Sulje"
                                        >
                                          <svg class="popover-close-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                                          </svg>
                                        </button>
                                      </div>
                                      <div class="popover-content">
                                        <div class="popover-image-container">
                                          <div class="popover-image-skeleton">
                                            <div class="skeleton-placeholder"></div>
                                          </div>
                                        </div>
                                        <div class="popover-text-content">
                                          <div class="popover-description-skeleton">
                                            <div class="skeleton-line"></div>
                                            <div class="skeleton-line skeleton-line-short"></div>
                                            <div class="skeleton-line skeleton-line-medium"></div>
                                          </div>
                                        </div>
                                      </div>
                                    </div>
                                  </li>
                                );
                              })}
                            </ul>
                          </div>
                        );
                      }
                      return null;
                    });
                  } else {
                    // Legacy flat format (for backward compatibility) - create single list
                    return (
                      <ul class="ingredients-list">
                        {ingredients.map((ingredientGroup) => {
                          if ('name' in ingredientGroup) {
                            const ingredient = ingredientGroup;
                            const { name, amount, unit, notes } = ingredient;
                            const itemInfo = getItemTypeAndCategory(name);
                            
                            if (!itemInfo) {
                              return (
                                <li class="ingredient-item">
                                  <span class="ingredient-fallback">
                                    {amount && <span class="ingredient-amount">{amount}</span>}
                                    {unit && <span class="ingredient-unit"> {unit}</span>}
                                    <span class="ingredient-name wiki-link wiki-link--unavailable"> {name}</span>
                                    {notes && <span class="ingredient-notes"> ({notes})</span>}
                                  </span>
                                </li>
                              );
                            }
                            
                            const itemType = itemInfo.type;
                            const itemCategory = itemInfo.category;
                            const itemId = itemInfo.id;
                            const popoverId = `popover-${itemId}-${itemType}`;
                            const triggerId = `trigger-${itemId}-${itemType}`;
                            
                            return (
                              <li class="ingredient-item">
                                {amount && <span class="ingredient-amount">{amount}</span>}
                                {unit && <span class="ingredient-unit">{unit}</span>}
                                <button 
                                  id={triggerId}
                                  popovertarget={popoverId}
                                  class={`ingredient-popover-trigger wiki-link wiki-link--${itemInfo ? 'available' : 'unavailable'} wiki-link--${itemType}`}
                                  data-item-id={itemId}
                                  data-item-type={itemType}
                                  data-category={itemCategory}
                                  aria-label={`Näytä tiedot: ${name}`}
                                >
                                  <span class="ingredient-name" view-transition-name={`popover-title-${itemId}`}>{name}</span>
                                </button>
                                {notes && <span class="ingredient-notes"> ({notes})</span>}
                                <div 
                                  id={popoverId}
                                  popover="auto"
                                  class="ingredient-popover"
                                  role="dialog"
                                  aria-labelledby={`${popoverId}-title`}
                                  data-item-id={itemId}
                                  data-item-type={itemType}
                                  data-category={itemCategory}
                                >
                                  <div class="popover-header">
                                    <h2 id={`${popoverId}-title`} class="popover-title">
                                      <span class="popover-title-text" view-transition-name={`popover-title-${itemId}`}>Ladataan...</span>
                                    </h2>
                                    <button 
                                      class="popover-close-btn"
                                      popovertarget={popoverId}
                                      popovertargetaction="hide"
                                      aria-label="Sulje"
                                    >
                                      <svg class="popover-close-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                                      </svg>
                                    </button>
                                  </div>
                                  <div class="popover-content">
                                    <div class="popover-image-container">
                                      <div class="popover-image-skeleton">
                                        <div class="skeleton-placeholder"></div>
                                      </div>
                                    </div>
                                    <div class="popover-text-content">
                                      <div class="popover-description-skeleton">
                                        <div class="skeleton-line"></div>
                                        <div class="skeleton-line skeleton-line-short"></div>
                                        <div class="skeleton-line skeleton-line-medium"></div>
                                      </div>
                                    </div>
                                  </div>
                                </div>
                              </li>
                            );
                          }
                          return null;
                        })}
                      </ul>
                    );
                  }
                })()}
              </div>
            )}
          </section>
        ) : null}
        
        <Content />
      </div>

      <!-- Recipe metadata -->
      <RecipeMetadata
      title={title}
      cuisine={cuisine}
      category={category}
      tags={enhancedData.tags}
      season={season}
      occasions={occasion}
      techniques={techniques}
      dietary={dietary}
      costLevel={cost_level}
      flavorProfile={flavor_profile}
      equipment={equipment}
      created={luotu?.toISOString()}
      modified={muokattu?.toISOString()}
    />

    </div>
     
   </div>
   
   <!-- Contact section -->
   <section class="contact-section">
     <div class="contact-content">
       <h2>
         Kysyttävää? Palautetta?
       </h2>

       <a href="mailto:null" class="contact-button">
         Ota yhteyttä
       </a>
       <p class="contact-description">
         Kuvaile aiheesi selkeästi ja yksinkertaisesti, kiitos.
       </p>
     </div>
   </section>

  <!-- Navigation Popover Content -->
  <div 
    id="navigation-popover"
    popover="auto"
    class="navigation-popover"
    role="dialog"
  >

    <!-- Popover Content -->
    <div class="popover-content">
      <div class="sidebar-card-content">
        <ul>
          {/* Main sections - Valmistus, Ohje, and instruction sections */}
          {(mise_en_place && mise_en_place.length > 0) || (ingredients && ingredients.length > 0) ? (
            <li>
              <a href="#valmistus">
                Valmistus
              </a>
            </li>
          ) : null}
          
          {/* Ohje link */}
          <li>
            <a href="#ohje">
              Ohje
            </a>
            {/* Instruction sections */}
            {instructionSections.length > 0 && (
              <ul>
                {instructionSections.map((section, index) => (
                  <li>
                    <a href={`#${section.id}`}>
                      {index + 1}. {section.text}
                    </a>
                  </li>
                ))}
              </ul>
            )}
          </li>
          
          {/* Other headings */}
          {groupedHeadings.filter(heading => 
            !heading.text.toLowerCase().includes('valmistus') && 
            !heading.text.toLowerCase().includes('ohje') && 
            !heading.text.toLowerCase().includes('vinkit') && 
            !heading.text.toLowerCase().includes('liitteet')
          ).map((heading) => (
            <li>
              <a href={`#${heading.id}`}>
                {heading.text}
              </a>
            </li>
          ))}
          
          {/* Vinkit and Liitteet as separate items */}
          {groupedHeadings.filter(heading => heading.text.toLowerCase().includes('vinkit')).map((heading) => (
            <li>
              <a href={`#${heading.id}`}>
                {heading.text}
              </a>
            </li>
          ))}
          {groupedHeadings.filter(heading => heading.text.toLowerCase().includes('liitteet')).map((heading) => (
            <li>
              <a href={`#${heading.id}`}>
                {heading.text}
              </a>
            </li>
          ))}
        </ul>
      </div>
    </div>
  </div>


  
  <!-- Unified Timer Popover -->
  <div 
    id="timer-popover"
    popover="auto"
    class="timer-popover"
    role="dialog"
    aria-labelledby="timer-popover-title"
  >

    <!-- Popover Content -->
    <div class="popover-content">
      <!-- Timer display/input -->
      <div class="timer-input-container">
        <div class="timer-input-group">
          <input id="timer-minutes-input" type="number" min="0" max="999" value="5" class="timer-input">
        </div>
        <span class="timer-separator">:</span>
        <div class="timer-input-group">
          <input id="timer-seconds-input" type="number" min="0" max="59" value="00" class="timer-input">
        </div>
      </div>
      
      <!-- Timer controls -->
      <div class="timer-controls-container">
        <button id="reset-timer" class="timer-btn timer-reset-btn">
          <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-rotate-ccw"><path d="M3 12a9 9 0 1 0 9-9 9.75 9.75 0 0 0-6.74 2.74L3 8"/><path d="M3 3v5h5"/></svg>
          Nollaa
        </button>
        <button id="start-timer" class="timer-btn timer-start-btn">
          <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-play"><polygon points="6 3 20 12 6 21 6 3"/></svg>
          Käynnistä
        </button>
        <button id="pause-timer" class="timer-btn timer-pause-btn" style="display: none;">
          <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-pause"><rect x="14" y="4" width="4" height="16" rx="1"/><rect x="6" y="4" width="4" height="16" rx="1"/></svg>
          Tauko
        </button>
      </div>
            
      <!-- Timer slider -->
      <div id="timer-slider-container" class="timer-slider-container">
        <input 
          id="timer-slider" 
          type="range" 
          min="5" 
          max="90" 
          step="1" 
          value="5" 
          class="timer-slider"
          title="Valitse aika 5-90 minuutin väliltä"
        >
        <div id="timer-slider-labels" class="timer-slider-labels">
          <span>5 min</span>
          <span>45 min</span>
          <span>1h 30min</span>
        </div>
      </div>
    </div>
  </div>
</Layout>

<!-- Modular recipe functionality -->
<script>
  import '../../scripts/timer.ts';
  import '../../scripts/recipe-interactions.ts';
  import '../../scripts/top-navigation-manager.ts';
  
  // Recipe overlay navigation scroll behavior
  let ticking = false;
  let scrollHandler: ((e: Event) => void) | null = null;
  
  function updateOverlayNav() {
    // Re-query elements in case DOM was replaced
    const overlayNav = document.getElementById('recipe-overlay-nav');
    const recipeTitle = document.querySelector('h1');
    
    if (!overlayNav || !recipeTitle) return;
    
    const titleRect = recipeTitle.getBoundingClientRect();
    const titleBottom = titleRect.bottom;
    
    // Show overlay when the h1 title is completely out of view (above the viewport)
    if (titleBottom <= 0) {
      overlayNav.classList.add('visible');
    } else {
      overlayNav.classList.remove('visible');
    }
    
    ticking = false;
  }
  
  function requestTick() {
    if (!ticking) {
      requestAnimationFrame(updateOverlayNav);
      ticking = true;
    }
  }
  
  function initOverlayNavigation() {
    // Remove existing scroll listener if it exists
    if (scrollHandler) {
      window.removeEventListener('scroll', scrollHandler);
    }
    
    // Create new scroll handler
    scrollHandler = requestTick;
    window.addEventListener('scroll', scrollHandler, { passive: true });
    
    // Initial check
    updateOverlayNav();
  }
  
  // Initialize overlay navigation
  initOverlayNavigation();
  
  // Reinitialize on view transitions
  document.addEventListener('astro:page-load', () => {
    if (window.location.pathname.includes('/reseptit/')) {
      initOverlayNavigation();
    }
  });

  // Print button functionality
  function initPrintButton() {
    const printButton = document.querySelector('.print-button');
    if (printButton) {
      printButton.addEventListener('click', () => {
        window.print();
      });
    }
  }

  // Initialize print button
  initPrintButton();

  // Reinitialize on view transitions
  document.addEventListener('astro:page-load', () => {
    if (window.location.pathname.includes('/reseptit/')) {
      initPrintButton();
    }
  });
  
  // Manage popover open state for overlay navigation styling
  function updatePopoverState() {
    const overlayNav = document.getElementById('recipe-overlay-nav');
    const timerPopover = document.getElementById('timer-popover');
    const navigationPopover = document.getElementById('navigation-popover');
    
    if (!overlayNav || !timerPopover || !navigationPopover) return;
    
    if (timerPopover.hasAttribute('popover') && timerPopover.getAttribute('popover') === 'auto' && timerPopover.matches(':popover-open') || 
        navigationPopover.hasAttribute('popover') && navigationPopover.getAttribute('popover') === 'auto' && navigationPopover.matches(':popover-open')) {
      overlayNav.setAttribute('data-popover-open', 'true');
    } else {
      overlayNav.setAttribute('data-popover-open', 'false');
    }
  }
  
  function initPopoverStateManagement() {
    const timerPopover = document.getElementById('timer-popover');
    const navigationPopover = document.getElementById('navigation-popover');
    
    if (timerPopover && navigationPopover) {
      // Remove existing listeners to avoid duplicates
      timerPopover.removeEventListener('toggle', updatePopoverState);
      navigationPopover.removeEventListener('toggle', updatePopoverState);
      
      // Add new listeners
      timerPopover.addEventListener('toggle', updatePopoverState);
      navigationPopover.addEventListener('toggle', updatePopoverState);
      
      // Initial check in case a popover is already open
      updatePopoverState();
    }
  }
  
  // Initialize popover state management
  initPopoverStateManagement();
  
  // Reinitialize on view transitions
  document.addEventListener('astro:page-load', () => {
    if (window.location.pathname.includes('/reseptit/')) {
      initPopoverStateManagement();
    }
  });
</script>