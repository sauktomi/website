---
/**
 * Individual Recipe Page
 * 
 * Dynamic route for displaying individual recipe content with enhanced
 * features like kitchen timer, ingredient popovers, and interactive elements.
 * 
 * Features:
 * - Full recipe content with structured sections
 * - Kitchen timer integration with sound alerts
 * - Ingredient popovers with detailed information
 * - Progress tracking for recipe steps
 * - Mobile-optimized interface with bottom toolbar
 * - SEO optimization with structured data
 * - View transitions for smooth navigation
 * 
 * Content Structure:
 * - Recipe metadata (time, difficulty, servings)
 * - Ingredients list with popover information
 * - Step-by-step instructions
 * - Cooking tips and notes
 * - Related recipes and techniques
 * 
 * Interactive Elements:
 * - Kitchen timer with multiple preset times
 * - Ingredient information popovers
 * - Step progress tracking
 * - Mobile-friendly controls
 * 
 * @author Tomi
 * @version 2.0.0
 */

// src/pages/reseptit/[...slug].astro
import { getCollection } from 'astro:content';
import Layout from '../../layouts/Layout.astro';
import { enhanceRecipeData, createRecipeNumberRegistry, setRecipeNumberRegistry, type EnhancedRecipeData } from '../../utils/ruoanlaitto-data.ts';
import { getItemTypeAndCategory } from '../../remark-recipe-links.mjs';

export async function getStaticPaths() {
  const reseptit = await getCollection('Reseptit');
  
  // Create and set the recipe number registry for global access (needed for UI display)
  const numberRegistry = createRecipeNumberRegistry(reseptit);
  setRecipeNumberRegistry(numberRegistry);
  
  // Process all recipes with enhanced data at build time
  const enhancedRecipes = await Promise.all(
    reseptit.map(async (entry) => {
      const enhancedData = await enhanceRecipeData(entry);
      return {
        entry,
        enhancedData,
      };
    })
  );
  
  const paths: Array<{ params: { slug: string }; props: { enhancedData: EnhancedRecipeData } }> = [];
  
  enhancedRecipes.forEach(({ entry, enhancedData }) => {
    // Extract base slug without category
    const baseSlug = entry.slug.includes('/') ? entry.slug.split('/').pop() || entry.slug : entry.slug;
    
    // Only add the canonical slug-based route
    // Number-based URLs will be handled by middleware redirects
    paths.push({
      params: { slug: baseSlug },
      props: { enhancedData },
    });
  });
  
  return paths;
}

const { enhancedData }: { enhancedData: EnhancedRecipeData } = Astro.props;

// All data is now pre-processed and ready to use
const {
  title,
  annokset,
  dietary,
  mise_en_place,
  ingredients,
  image,
  description,
  processedTime,
  formattedTime,
  difficulty,
  groupedHeadings,
  instructionSections,
  Content
} = enhancedData;



---

<Layout title={title} tocHeadings={groupedHeadings} needsWikiLinks={true}>
  <!-- Add canonical URL for SEO -->
  <link slot="head" rel="canonical" href={enhancedData.canonicalUrl} />

  <div class="main-grid">
    <!-- Main content area -->
    <div id="recipe-main" class="content-main mx-auto prose md:prose-xl xl:prose-2xl dark:prose-invert">
      <!-- Enhanced recipe header -->
      <header>
          <div class="header-container text-secondary-accent hover:text-primary-dark">
            <span class="item-number">
              #{enhancedData.formattedRecipeNumber}
            </span>

            <!-- Dietary information -->
            {dietary && (
              Array.isArray(dietary) 
                ? dietary.length > 0 
                : dietary.type?.length > 0
            ) && (
              <div class="dietary-tags">
                {(Array.isArray(dietary) ? dietary : dietary.type || []).map((diet: string) => (
                  <span class="dietary-tag">
                    {diet}
                  </span>
                ))}
              </div>
            )}
            
            <button onclick="window.print()" class="p-2 text-secondary-accent hover:text-primary-dark" aria-label="Tulosta resepti">
              <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 17h2a2 2 0 002-2v-4a2 2 0 00-2-2H5a2 2 0 00-2 2v4a2 2 0 002 2h2m2 4h6a2 2 0 002-2v-4a2 2 0 00-2-2H9a2 2 0 00-2 2v4a2 2 0 002 2zm8-12V5a2 2 0 00-2-2H9a2 2 0 00-2 2v4h10z"/>
              </svg>
            </button>
          </div>
        <h1 class="recipe-title">
          {title}
        </h1>
        
        <!-- Essential info with better spacing -->
        <div class="recipe-essentials">
          <div class="recipe-meta-info">
            {processedTime && (
              <div class="recipe-meta-item">
                <span>
                  {formattedTime?.totalTime}
                </span>
              </div>
            )}
            
            {difficulty && (
              <div class="recipe-meta-item">
                <span class={`font-medium ${difficulty.color}`}>{difficulty.text}</span>
              </div>
            )}
            
            {annokset && (
              <div class="recipe-meta-item">
                <span>{annokset}</span>
              </div>
            )}
        </div>

        <!-- Recipe description -->
        {description && (
          <div class="recipe-description">
            <p class="lead">
              {Array.isArray(description) 
              ? description[0] 
              : description
              }
            </p>
          </div>
        )}

        <!-- Hero image with skeleton loading to prevent layout shift -->
        <figure class="recipe-hero-image">
          <div class="image-wrapper">
            <div class="image-skeleton"></div>
            {image && (
              <img 
                src={image} 
                alt={enhancedData.metadataProps?.imageAlt || enhancedData.metadataProps?.imageCaption || title} 
                class="image-actual"
                loading="lazy"
                decoding="async"
                onload="this.parentNode.classList.add('loaded')"
                onerror="this.parentNode.classList.add('loaded')"
              />
            )}
          </div>
          {enhancedData.metadataProps?.imageCaption && (
            <figcaption>
              {enhancedData.metadataProps.imageCaption}
            </figcaption>
          )}
        </figure>
      </header>
      
      <!-- Recipe content with enhanced typography -->
      <div class="recipe-body max-w-none">
        <!-- Valmistus section with ingredients and mise en place -->
        {(mise_en_place && mise_en_place.length > 0) || (ingredients && ingredients.length > 0) ? (
          <section id="valmistus-section">
            <h2 id="valmistus">Valmistus</h2>
            
            <!-- Mise en place -->
            {mise_en_place && mise_en_place.length > 0 && (
              <div>
                <h3 id="mise-en-place">Mise en place</h3>
                <ul>
                  {mise_en_place.map((task) => (
                    <li class="task-list-item">
                      <input type="checkbox" disabled />
                      <span>{task}</span>
                    </li>
                  ))}
                </ul>
              </div>
            )}
            
            <!-- Ingredients -->
            {ingredients && ingredients.length > 0 && (
              <div>
                <h3 id="ainekset">Ainekset</h3>
                <ul>
                  {ingredients.map((ingredient) => {
                    const { name, amount, unit, notes } = ingredient;
                    const itemInfo = getItemTypeAndCategory(name);
                    
                    if (!itemInfo) {
                      return (
                        <li class="ingredient-item">
                          <span class="ingredient-fallback text-current">
                            {amount && <span class="ingredient-amount">{amount}</span>}
                            {unit && <span class="ingredient-unit"> {unit}</span>}
                            <span class="ingredient-name"> {name}</span>
                            {notes && <span class="ingredient-notes"> ({notes})</span>}
                          </span>
                        </li>
                      );
                    }
                    
                    const itemType = itemInfo.type;
                    const itemCategory = itemInfo.category;
                    const itemId = itemInfo.id;
                    const popoverId = `popover-${itemId}-${itemType}`;
                    const triggerId = `trigger-${itemId}-${itemType}`;
                    
                    return (
                      <li class="ingredient-item">
                        {amount && <span class="ingredient-amount">{amount}</span>}
                        {unit && <span class="ingredient-unit">{unit}</span>}
                        <button 
                          id={triggerId}
                          popovertarget={popoverId}
                          class={`ingredient-popover-trigger wiki-link wiki-link--available wiki-link--${itemType} text-current underline decoration-dotted underline-offset-2 hover:decoration-solid transition-all duration-200 focus-visible:outline-2 focus-visible:outline-offset-2 rounded-md`}
                          data-item-id={itemId}
                          data-item-type={itemType}
                          data-category={itemCategory}
                          aria-label={`Näytä tiedot: ${name}`}
                          style="outline-color: var(--color-primary-accent);"
                        >
                          <span class="ingredient-name" view-transition-name={`popover-title-${itemId}`}>{name}</span>
                        </button>
                        {notes && <span class="ingredient-notes"> ({notes})</span>}
                        <div 
                          id={popoverId}
                          popover="auto"
                          class="ingredient-popover bg-primary-light border border-secondary rounded-xl shadow-prominent max-w-md w-full max-h-[80vh] overflow-hidden backdrop-blur-sm"
                          role="dialog"
                          aria-labelledby={`${popoverId}-title`}
                          data-item-id={itemId}
                          data-item-type={itemType}
                          data-category={itemCategory}
                        >
                          <div class="popover-header flex items-center justify-between p-4 border-b border-secondary bg-secondary-light">
                            <h2 id={`${popoverId}-title`} class="popover-title text-lg font-semibold text-primary-dark m-0">
                              <span class="popover-title-text" view-transition-name={`popover-title-${itemId}`}>Ladataan...</span>
                            </h2>
                            <button 
                              class="popover-close-btn p-2 rounded-lg hover:bg-secondary transition-colors duration-200 focus-visible:outline-2 focus-visible:outline-offset-2"
                              style="outline-color: var(--color-primary-accent);"
                              popovertarget={popoverId}
                              popovertargetaction="hide"
                              aria-label="Sulje"
                            >
                              <svg class="popover-close-icon size-5 text-secondary-accent" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                              </svg>
                            </button>
                          </div>
                          <div class="popover-content p-4 space-y-4">
                            <div class="popover-image-container aspect-video rounded-lg overflow-hidden bg-secondary-light">
                              <div class="popover-image-skeleton w-full h-full bg-secondary-light animate-pulse">
                                <div class="skeleton-placeholder w-full h-full bg-secondary-light"></div>
                              </div>
                            </div>
                            <div class="popover-text-content space-y-4">
                              <div class="popover-description-skeleton space-y-2">
                                <div class="skeleton-line h-4 bg-secondary-light animate-pulse rounded"></div>
                                <div class="skeleton-line skeleton-line-short h-4 bg-secondary-light animate-pulse rounded w-3/4"></div>
                                <div class="skeleton-line skeleton-line-medium h-4 bg-secondary-light animate-pulse rounded w-1/2"></div>
                              </div>
                            </div>
                          </div>
                        </div>
                      </li>
                    );
                  })}
                </ul>
              </div>
            )}
          </section>
        ) : null}
        
        <Content />
      </div>
      
    </div>


     
   </div>
   
   <!-- Contact section -->
   <section class="contact-section">
     <div class="text-center">
       <h2>
         Kysyttävää? Palautetta?
       </h2>

       <a href="mailto:null" class="contact-button">
         Ota yhteyttä
       </a>
       <p class="contact-description">
         Kuvaile aiheesi selkeästi ja yksinkertaisesti, jotta varmasti saat vastauksen.
       </p>
     </div>
   </section>

  <!-- Navigation Popover Content -->
  <div 
    id="navigation-popover"
    popover="auto"
    class="navigation-popover bg-primary-light border border-secondary rounded-xl shadow-prominent max-w-md w-full max-h-[80vh] overflow-hidden backdrop-blur-sm"
    role="dialog"
    aria-labelledby="navigation-popover-title"
  >
    <!-- Popover Header -->
    <div class="popover-header flex items-center justify-between p-4 border-b border-secondary bg-secondary-light">
      <h2 id="navigation-popover-title" class="popover-title text-lg font-semibold text-primary-dark m-0">
        Pikasiirtymä
      </h2>
      <button 
        class="popover-close-btn p-2 rounded-lg hover:bg-secondary transition-colors duration-200 focus-visible:outline-2 focus-visible:outline-offset-2"
        style="outline-color: var(--color-primary-accent);"
        popovertarget="navigation-popover"
        popovertargetaction="hide"
        aria-label="Sulje"
      >
        <svg class="popover-close-icon size-5 text-secondary-accent" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
        </svg>
      </button>
    </div>

    <!-- Popover Content -->
    <div class="popover-content p-4">
      <div class="sidebar-card-content">
        <ul>
          {/* Main sections - Valmistus, Ohje, and instruction sections */}
          {(mise_en_place && mise_en_place.length > 0) || (ingredients && ingredients.length > 0) ? (
            <li>
              <a href="#valmistus">
                Valmistus
              </a>
            </li>
          ) : null}
          
          {/* Ohje link */}
          <li>
            <a href="#ohje">
              Ohje
            </a>
          </li>
          
          {/* Instruction sections */}
          {instructionSections.length > 0 && instructionSections.map((section, index) => (
            <li>
              <a href={`#${section.id}`}>
                {index + 1}. {section.text}
              </a>
            </li>
          ))}
          
          {/* Other headings */}
          {groupedHeadings.filter(heading => 
            !heading.text.toLowerCase().includes('valmistus') && 
            !heading.text.toLowerCase().includes('ohje') && 
            !heading.text.toLowerCase().includes('vinkit') && 
            !heading.text.toLowerCase().includes('liitteet')
          ).map((heading) => (
            <li>
              <a href={`#${heading.id}`}>
                {heading.text}
              </a>
            </li>
          ))}
          
          {/* Vinkit and Liitteet as separate items */}
          {groupedHeadings.filter(heading => heading.text.toLowerCase().includes('vinkit')).map((heading) => (
            <li>
              <a href={`#${heading.id}`}>
                {heading.text}
              </a>
            </li>
          ))}
          {groupedHeadings.filter(heading => heading.text.toLowerCase().includes('liitteet')).map((heading) => (
            <li>
              <a href={`#${heading.id}`}>
                {heading.text}
              </a>
            </li>
          ))}
        </ul>
      </div>
    </div>
  </div>

  <!-- Universal Bottom Pill Bar (Dock) -->
  <div id="bottom-dock" class="bottom-dock">
    <!-- Timer button (always visible) -->
    <button 
      id="mobile-timer-btn"
      popovertarget="timer-popover"
      class="mobile-dock-btn timer-btn"
      aria-label="Keittiöajastin"
    >
      <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"/>
      </svg>
      <span class="mobile-timer-text"></span>
    </button>

    <!-- Dynamic navigation buttons (pinned from popup) -->
    <div id="dynamic-buttons" class="dynamic-buttons">
      {/* Buttons will be added dynamically via JavaScript */}
    </div>

    <!-- Navigation toggle button -->
    <button 
      id="navigation-toggle"
      popovertarget="navigation-popover"
      class="mobile-dock-btn toggle-btn"
      aria-label="Näytä pikasiirtymä"
    >
      <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"/>
      </svg>
    </button>
  </div>
  
  <!-- Unified Timer Popover -->
  <div 
    id="timer-popover"
    popover="auto"
    class="timer-popover timer-popover-positioned bg-primary-light border border-secondary rounded-xl shadow-prominent max-w-md w-full max-h-[80vh] overflow-hidden backdrop-blur-sm popover-backdrop popover-smooth-transition"
    role="dialog"
    aria-labelledby="timer-popover-title"
    position-anchor="--timer-anchor"
    position-area="center"
  >
    <!-- Popover Header -->
    <div class="popover-header flex items-center justify-between p-4 border-b border-secondary bg-secondary-light">
      <h2 id="timer-popover-title" class="popover-title text-lg font-semibold text-primary-dark m-0">
        Keittiöajastin
      </h2>
      <button 
        class="popover-close-btn p-2 rounded-lg hover:bg-secondary transition-colors duration-200 focus-visible:outline-2 focus-visible:outline-offset-2"
        style="outline-color: var(--color-primary-accent);"
        popovertarget="timer-popover"
        popovertargetaction="hide"
        aria-label="Sulje"
      >
        <svg class="popover-close-icon size-5 text-secondary-accent" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
        </svg>
      </button>
    </div>

    <!-- Popover Content -->
    <div class="popover-content p-4 space-y-4">
      <!-- Timer display/input -->
      <div class="flex items-center justify-center gap-1 mb-4 bg-secondary-light p-3 rounded-lg border border-secondary-light">
        <div class="flex-1 text-center">
          <input id="timer-minutes-input" type="number" min="0" max="999" value="5" class="w-full text-2xl font-mono font-bold text-center bg-transparent border-none rounded text-primary-dark focus:outline-none focus:bg-secondary-light focus:border-secondary">
        </div>
        <span class="text-2xl font-mono font-bold text-primary-dark">:</span>
        <div class="flex-1 text-center">
          <input id="timer-seconds-input" type="number" min="0" max="59" value="00" class="w-full text-2xl font-mono font-bold text-center bg-transparent border-none rounded text-primary-dark focus:outline-none focus:bg-secondary-light focus:border-secondary">
        </div>
      </div>
      
      <!-- Timer slider -->
      <div id="timer-slider-container" class="mb-4 w-full">
        <input 
          id="timer-slider" 
          type="range" 
          min="5" 
          max="90" 
          step="1" 
          value="5" 
          class="w-full h-2 bg-secondary-light rounded-lg appearance-none cursor-pointer slider"
          title="Valitse aika 5-90 minuutin väliltä"
        >
        <div id="timer-slider-labels" class="flex justify-between text-xs text-primary-dark mt-1">
          <span>5 min</span>
          <span>45 min</span>
          <span>1h 30min</span>
        </div>
      </div>
      
      <!-- Timer controls -->
      <div class="flex flex-col gap-2 justify-center items-center w-full timer-controls-container">
        <button id="start-timer" class="timer-btn timer-start-btn" title="Käynnistä ajastin">
          <svg class="w-3 h-3 mr-1" fill="currentColor" viewBox="0 0 24 24">
            <path d="M8 5v14l11-7z"/>
          </svg>
          Käynnistä
        </button>
        <button id="pause-timer" class="timer-btn timer-pause-btn" title="Pysäytä ajastin" style="display: none;">
          <svg class="w-3 h-3 mr-1" fill="currentColor" viewBox="0 0 24 24">
            <path d="M6 19h4V5H6v14zm8-14v14h4V5h-4z"/>
          </svg>
          Pysäytä
        </button>
        <button id="reset-timer" class="timer-btn timer-reset-btn" title="Nollaa ajastin" style="display: none;">
          <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"/>
          </svg>
        </button>
      </div>
    </div>
  </div>
</Layout>

<!-- Modular recipe functionality -->
<script>
  import '../../scripts/timer.ts';
  import '../../scripts/recipe-interactions.ts';
  import '../../scripts/dock-manager.ts';
</script>