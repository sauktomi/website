---
/**
 * Recipe Listing Page
 * 
 * Displays all recipes with advanced filtering and search capabilities.
 * Features a unified filter system that allows users to filter by difficulty,
 * cooking time, techniques, dietary restrictions, and more.
 * 
 * Features:
 * - Container-responsive grid layout with recipe cards
 * - Advanced filtering system with multiple criteria
 * - Search functionality with real-time results
 * - Recipe numbering system for easy reference
 * - Category-based organization optimized for container queries
 * - Optimized images with lazy loading
 * 
 * Filter Options:
 * - Difficulty level (helppo, keskitaso, haastava, vaativa)
 * - Cooking time (quick, medium, long, extended)
 * - Cooking techniques
 * - Dietary restrictions
 * - Cost level
 * - Categories (kokkaus, leivonta, juomat)
 * 
 * @author Tomi
 * @version 2.0.0
 */

import { getCollection } from 'astro:content';
import Layout from '../layouts/Layout.astro';
import FilterSystem from '../components/FilterSystem.astro';
import { createRecipeNumberRegistry, setRecipeNumberRegistry, getRecipeNumber, formatRecipeNumber, generateNumberVariations } from '../utils/ruoanlaitto-data.ts';
import { enhanceRecipeEntries } from '../utils/recipe-data-merger.ts';

// Get all recipe entries with proper numbering
const allRecipeEntries = await getCollection('Reseptit');

// Create and set the recipe number registry for global access
const numberRegistry = createRecipeNumberRegistry(allRecipeEntries);
setRecipeNumberRegistry(numberRegistry);

// Enhance all recipes with unified data system
const enhancedRecipes = await enhanceRecipeEntries(allRecipeEntries);

// Helper function to get excerpt
const getExcerpt = (description: any) => {
  if (Array.isArray(description) && description.length > 0) return description[0];
  if (typeof description === 'string') return description;
  return 'Katso reseptin tiedot napsauttamalla.';
};

// Define recipe type interface
interface ProcessedRecipe {
  title: string;
  slug: string;
  excerpt: string;
  image: string;
  category: string | null;
  id: string;
  techniques: string[];
  vaikeustaso: string | null;
  dietaryType: string[];
  costLevel: string | null;
  tags: string[];
  kokonaisaika: string | number | null;
  recipeNumber: number | null;
  formattedRecipeNumber: string | null;
  numberVariations: string[];
}

// Process all recipes into a single flat array using merged data
const allRecipes: ProcessedRecipe[] = enhancedRecipes.map(({ entry, data }) => {
  // Get recipe number
  const recipeNumber = getRecipeNumber(entry.slug);
  const formattedRecipeNumber = recipeNumber ? formatRecipeNumber(recipeNumber) : null;
  const numberVariations = recipeNumber ? generateNumberVariations(recipeNumber) : [];
  
  // Extract base slug without category (to match [...slug].astro)
  const baseSlug = entry.slug.includes('/') ? entry.slug.split('/').pop() || entry.slug : entry.slug;
  
  // Create recipe object with proper typing using merged data
  return {
    title: data.title,
    slug: baseSlug,
    excerpt: getExcerpt(data.description),
    image: data.image || '/placeholder-recipe.svg',
    category: data.category?.toLowerCase().replace(/\s+/g, '-') || null,
    id: entry.id,
    techniques: data.techniques || [],
    vaikeustaso: data.vaikeustaso || null,
    dietaryType: Array.isArray(data.dietary) ? [] : (data.dietary?.type || []),
    costLevel: data.cost_level || null,
    tags: data.tags || [],
    kokonaisaika: data.time?.kokonaisaika || null,
    recipeNumber: recipeNumber,
    formattedRecipeNumber: formattedRecipeNumber,
    numberVariations: numberVariations,
  };
});

// Extract filter options
const categories = [
  { id: 'kokkaus', name: 'Kokkaus' },
  { id: 'leivonta', name: 'Leivonta' },
  { id: 'juomat', name: 'Juomat' }
];

// Prepare filter configuration for unified system
const filterOptions = {
  difficultyLevels: ['helppo', 'keskivaikea', 'vaativa'],
  dietaryTypes: [...new Set(enhancedRecipes.flatMap(({ data }) => 
    Array.isArray(data.dietary) ? [] : (data.dietary?.type || [])
  ).filter(Boolean))],
  tags: [...new Set(enhancedRecipes.flatMap(({ data }) => data.tags || []).filter(Boolean))],
  costLevels: ['edullinen', 'kohtuullinen', 'hintava', 'kallis'],
  sortOptions: [
    { value: 'newest', label: 'Uusimmat ensin', default: true },
    { value: 'name', label: 'Aakkosjärjestys' },
    { value: 'category', label: 'Kategoria' },
    { value: 'difficulty', label: 'Vaikeustaso' }
  ]
};
---

<Layout title="Reseptit | Ruoanlaitto">
  <div class="page-container">
    <!-- Header -->
    <header class="page-header">
      <h1 class="hero-title">
        <span transition:name="page-title-reseptit">Reseptit</span>
      </h1>
    </header>

    <!-- Main Content -->
    <div class="main-content">
      <!-- Filter System -->
      <FilterSystem
        searchPlaceholder="Etsi reseptejä..."
        filterSections={[
          {
            id: 'techniques',
            title: 'Tekniikat',
            icon: 'M19.428 15.428a2 2 0 00-1.022-.547l-2.387-.477a6 6 0 00-3.86.517l-.318.158a6 6 0 01-3.86.517L6.05 15.21a2 2 0 00-1.806.547M8 4h8l-1 1v5.172a2 2 0 00.586 1.414l5 5c1.26 1.26.367 3.414-1.415 3.414H4.828c-1.782 0-2.674-2.154-1.414-3.414l5-5A2 2 0 009 10.172V5L8 4z',
            type: 'multi',
            options: [...new Set(enhancedRecipes.flatMap(({ data }) => data.techniques || []).filter(Boolean))].map(technique => ({
              id: technique,
              label: technique,
              value: technique
            }))
          },
          {
            id: 'vaikeustaso',
            title: 'Vaikeustaso',
            icon: 'M13 10V3L4 14h7v7l9-11h-7z',
            type: 'multi',
            options: filterOptions.difficultyLevels.map(level => ({
              id: level,
              label: level.charAt(0).toUpperCase() + level.slice(1),
              value: level
            }))
          },
          {
            id: 'category',
            title: 'Kategoriat',
            icon: 'M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10',
            type: 'multi',
            options: categories.map(category => ({
              id: category.id,
              label: category.name,
              value: category.id
            }))
          },
          {
            id: 'kokonaisaika',
            title: 'Valmistusaika',
            icon: 'M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z',
            type: 'multi',
            options: [
              { id: 'quick', label: 'Nopea (alle 30 min)', value: 'quick' },
              { id: 'medium', label: 'Keskipitkä (30-60 min)', value: 'medium' },
              { id: 'long', label: 'Pitkä (1-2 tuntia)', value: 'long' },
              { id: 'extended', label: 'Erittäin pitkä (yli 2h)', value: 'extended' }
            ]
          },
          {
            id: 'tags',
            title: 'Tägit',
            icon: 'M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z',
            type: 'multi',
            options: filterOptions.tags.map(tag => ({
              id: tag,
              label: tag,
              value: tag
            }))
          }
        ]}
      />

      <!-- No Results -->
      <div id="no-results" class="no-results" role="status" aria-live="polite">
        <div class="no-results-content">
          <svg class="no-results-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
          </svg>
          <p class="no-results-title">Ei tuloksia</p>
          <p class="no-results-description">Kokeile eri hakusanoja tai tyhjennä suodattimet</p>
        </div>
      </div>

      <!-- Recipe Content - Responsive Categories -->
      <div class="content-groups-container" id="recipe-content">
        {categories.map(category => {
          const categoryRecipes = allRecipes.filter(recipe => recipe.category === category.id);
          if (categoryRecipes.length === 0) return null;
          
          return (
            <div class="category-section" data-category={category.id}>
              <h2 id={category.id}>
                {category.name}
              </h2>
              <div class="category-items">
                {categoryRecipes.map((recipe) => (
                  <div 
                    class="list-item-wrapper item"
                    data-title={recipe.title.toLowerCase()}
                    data-category={recipe.category}
                    data-techniques={recipe.techniques?.join(',').toLowerCase() || ''}
                    data-vaikeustaso={recipe.vaikeustaso || ''}
                    data-difficulty={recipe.vaikeustaso || ''}
                    data-dietary={recipe.dietaryType?.join(',') || ''}
                    data-costlevel={recipe.costLevel || ''}
                    data-cost={recipe.costLevel || ''}
                    data-tags={recipe.tags?.join(',').toLowerCase() || ''}
                    data-kokonaisaika={recipe.kokonaisaika || ''}
                    data-id={recipe.id}
                    data-search-name={recipe.title.toLowerCase()}
                    data-date={recipe.id}
                    data-recipe-number={recipe.formattedRecipeNumber || ''}
                    data-recipe-number-raw={recipe.recipeNumber || ''}
                    data-recipe-number-variations={recipe.numberVariations.join(',')}
                  >
                    <a 
                      href={`/reseptit/${recipe.slug}/`} 
                      class="group list-item"
                      data-recipe-category={recipe.category}
                    >
                      <span class="recipe-title" transition:name={`recipe-title-${recipe.slug}`}>
                        {recipe.title}
                      </span>
                    </a>
                  </div>
                ))}
              </div>
            </div>
          );
        })}
      </div>
    </div>
  </div>
</Layout>

<script>
  // Update recipe links to preserve category parameter
  function updateRecipeLinks() {
    const urlParams = new URLSearchParams(window.location.search);
    const categoryParam = urlParams.get('category');
    
    if (categoryParam) {
      // Update all recipe links to include the category parameter
      document.querySelectorAll('.list-item').forEach(link => {
        if (link instanceof HTMLAnchorElement) {
          const href = link.href;
          const url = new URL(href);
          url.searchParams.set('category', categoryParam);
          link.href = url.toString();
        }
      });
    }
  }
  
  // Run on initial load
  updateRecipeLinks();
  
  // Run when URL changes (filter updates)
  let lastUrl = window.location.href;
  const observer = new MutationObserver(() => {
    if (window.location.href !== lastUrl) {
      lastUrl = window.location.href;
      updateRecipeLinks();
    }
  });
  
  observer.observe(document.body, {
    childList: true,
    subtree: true
  });
  
  // Also update on popstate (browser back/forward)
  window.addEventListener('popstate', updateRecipeLinks);
</script>