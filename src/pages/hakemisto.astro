---
/**
 * Directory Page (Hakemisto)
 * 
 * Comprehensive directory of ingredients, equipment, and cooking techniques.
 * Provides detailed information about cooking components with filtering and
 * search capabilities.
 * 
 * Features:
 * - Unified directory of ingredients, equipment, and techniques
 * - Advanced filtering by type, dietary restrictions, and categories
 * - Search functionality with real-time results
 * - Alphabetical organization with quick navigation
 * - Detailed information cards with images
 * - Cross-references between related items
 * 
 * Content Types:
 * - Ainesosat (Ingredients): Raw materials and food items
 * - Välineet (Equipment): Kitchen tools and appliances
 * - Tekniikat (Techniques): Cooking methods and procedures
 * 
 * Filter Options:
 * - Type (ingredients, equipment, techniques)
 * - Dietary restrictions (vegetarian, gluten-free, etc.)
 * - Categories (subcategories within each type)
 * - Alphabetical sorting
 * 
 * @author Tomi
 * @version 2.0.0
 */

import Layout from '../layouts/Layout.astro';
import SimpleFilterSystem from '../components/SimpleFilterSystem.jsx';
import { 
  extractUniqueDietaryTags
} from '../utils/ruoanlaitto-data.ts';
import { processUnifiedData } from '../remark-wiki-link.mjs';

// Use the same unified data processing as recipe slug pages
const processedData = processUnifiedData();
const { allItems, ingredients, equipment: equipmentItems, techniques: techniqueItems, categories: dataCategories } = processedData;

// Get all categories from unified processing
const ingredientCategories = dataCategories.ingredients;
const equipmentCategories = dataCategories.equipment;
const techniqueCategories = dataCategories.techniques;

const categories = [
  // Main type categories
  { id: 'ainesosat', name: 'Ainesosat', description: 'Ruoanlaiton raaka-aineet' },
  { id: 'tekniikat', name: 'Tekniikat', description: 'Ruoanlaittomenetelmät' },
  { id: 'välineet', name: 'Välineet', description: 'Keittiövälineet ja -laitteet' },
  
  // Ingredient subcategories
  ...Object.values(ingredientCategories).map((cat: any) => ({
    id: cat.id,
    name: cat.name,
    description: cat.description || '',
    parent: 'ainesosat'
  })),
  
  // Equipment subcategories  
  ...Object.values(equipmentCategories).map((cat: any) => ({
    id: cat.id,
    name: cat.name,
    description: cat.description || '',
    parent: 'välineet'
  })),
  
  // Technique subcategories
  ...Object.values(techniqueCategories).map((cat: any) => ({
    id: cat.id,
    name: cat.name,
    description: cat.description || '',
    parent: 'tekniikat'
  }))
];

// Sort all items alphabetically at build time to prevent runtime resorting
allItems.sort((a: any, b: any) => 
  a.name.localeCompare(b.name, 'fi', { numeric: true, sensitivity: 'base' })
);

// Get all unique dietary tags for filtering (only from ingredients)
const dietaryOptions = extractUniqueDietaryTags(ingredients as any[]);

// Helper function to get optimized image URL
const getOptimizedImageUrl = (item: any, size: 'small' | 'large' = 'small') => {
  // Check if the item has optimized images embedded
  if (item && item.optimizedImages && item.optimizedImages[size]) {
    return item.optimizedImages[size];
  }
  
  // Fallback: construct URL from original imageUrl
  if (item && item.imageUrl) {
    const lastDotIndex = item.imageUrl.lastIndexOf('.');
    if (lastDotIndex > 0) {
      const basePath = item.imageUrl.substring(0, lastDotIndex);
      return `${basePath}-${size}.webp`;
    }
  }
  
  return null;
};

// Get all unique first letters for alphabet filtering
const allFirstLetters = new Set<string>();
allItems.forEach((item: any) => {
  const firstChar = item.name.charAt(0).toUpperCase();
  const letterKey = /^[A-ZÄÖÅ]/.test(firstChar) ? firstChar : '#';
  allFirstLetters.add(letterKey);
});

const activeLetters = Array.from(allFirstLetters).sort((a, b) => {
  if (a === '#') return 1;
  if (b === '#') return 1;
  return a.localeCompare(b, 'fi');
});

// Configure alphabet links as filters for unified filter bar
const alphabetLinks = activeLetters.map(letter => ({
  letter: letter,
  href: `#letter-${letter === '#' ? 'other' : letter}`,
  label: `Näytä kirjain ${letter}`
}));

// Type options for unified hakemisto
const typeOptions = [
  { id: 'ainesosat', name: 'Ainesosat' },
  { id: 'tekniikat', name: 'Tekniikat' },
  { id: 'välineet', name: 'Välineet' }
];

// Configure filter sections for the main popup
const mainFilterSections = [
  {
    id: 'sort',
    title: 'Järjestys',
    icon: 'M3 7v10a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2H5a2 2 0 00-2-2z',
    type: 'select' as const,
    isSort: true,
    options: [
      { id: 'alphabetical', label: 'Aakkosjärjestys', value: 'alphabetical', default: true },
      { id: 'type', label: 'Tyyppi', value: 'type' },
      { id: 'dietary', label: 'Ruokavalio', value: 'dietary' },
      { id: 'category', label: 'Kategoria', value: 'category' }
    ]
  },
  {
    id: 'type',
    title: 'Tyyppi',
    icon: 'M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10',
    type: 'multiSelect' as const,
    options: typeOptions.map(type => ({
      id: type.id,
      label: type.name,
      value: type.id
    })),
    gridCols: 'grid-cols-1 sm:grid-cols-3'
  },
  {
    id: 'dietary',
    title: 'Ruokavalio',
    icon: 'M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z',
    type: 'multiSelect' as const,
    options: dietaryOptions.map((diet: string) => ({
      id: diet,
      label: diet,
      value: diet
    })),
    maxHeight: '60',
    gridCols: 'grid-cols-2 sm:grid-cols-3 lg:grid-cols-4'
  },
  {
    id: 'category',
    title: 'Alakategoriat',
    icon: 'M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z',
    type: 'select' as const,
    options: categories.filter(cat => (cat as any).parent).map(category => ({
      id: category.id,
      label: category.name,
      value: category.id
    })),
    maxHeight: '60',
    gridCols: 'grid-cols-1 sm:grid-cols-2'
  }
];
---

<Layout title="Hakemisto | Ruoanlaitto" needsWikiLinks={true}>
  <!-- Skip to content -->
  <a href="#content-groups" class="sr-only focus:not-sr-only focus:absolute focus:top-4 focus:left-4 bg-primary-dark text-primary-light px-4 py-2 rounded-lg z-50 transition-all">
    Siirry sisältöön
  </a>

  <div class="min-h-screen">
    <!-- Header -->
    <header class="text-center">
      <h1>Hakemisto</h1>
    </header>

    <!-- Main Content -->
    <div>
      <!-- Simple Filter System -->
      <SimpleFilterSystem
        config={{
          itemSelector: '.list-item-wrapper',
          sectionSelector: '.category-section',
          noResultsId: 'no-results'
        }}
        searchPlaceholder="Etsi hakemistosta..."
        filterSections={[
          {
            id: 'type',
            title: 'Tyyppi',
            icon: 'M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10',
            type: 'multi' as const,
            options: typeOptions.map(type => ({
              id: type.id,
              label: type.name,
              value: type.id
            }))
          },
          {
            id: 'dietary',
            title: 'Ruokavalio',
            icon: 'M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z',
            type: 'multi' as const,
            options: dietaryOptions.map(diet => ({
              id: diet,
              label: diet,
              value: diet
            }))
          },
          {
            id: 'category',
            title: 'Alakategoriat',
            icon: 'M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z',
            type: 'single' as const,
            options: categories.filter(cat => 'parent' in cat && cat.parent).map(category => ({
              id: category.id,
              label: category.name,
              value: category.id
            }))
          }
        ]}
        resultsCountText="kohdetta löytyi"
        client:visible
      />

      <!-- Mobile Category Filter Buttons -->
      <div class="mobile-category-buttons sm:hidden mt-4 mb-6">
        <div class="flex gap-2">
          {typeOptions.map(type => (
            <button
              class="mobile-category-button flex-1 px-4 py-2 rounded-lg border border-secondary text-primary-dark hover:bg-secondary-light transition-colors"
              data-type={type.id}
              aria-label={`Näytä ${type.name} kohteet`}
            >
              {type.name}
            </button>
          ))}
        </div>
      </div>

      <!-- No Results -->
      <div id="no-results" class="no-results" role="status" aria-live="polite">
        <div class="text-secondary-accent">
          <svg class="no-results-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
          </svg>
          <p class="no-results-title">Ei tuloksia</p>
          <p class="no-results-description">Kokeile eri hakusanoja tai tyhjennä suodattimet</p>
        </div>
      </div>

      <!-- Main Content Groups - Side by Side Types -->
      <div class="content-groups-container" id="content-groups">
        {typeOptions.map(type => {
          const typeItems = allItems.filter(item => item.type === type.id);
          if (typeItems.length === 0) return null;
          
          return (
            <div class="category-section" data-type={type.id}>
              <h2 class="category-title text-2xl font-semibold text-primary-dark mb-4">
                {type.name}
              </h2>
              {typeItems.map((hakemistoItem: any) => (
                <div 
                  class="list-item-wrapper item"
                  data-tags={hakemistoItem.tags?.join(',') || ''}
                  data-dietary={hakemistoItem.dietaryInfo?.join(',') || ''}
                  data-category={hakemistoItem.category}
                  data-type={hakemistoItem.type}
                  data-name={hakemistoItem.name}
                  data-search-name={hakemistoItem.name.toLowerCase()}
                  data-first-letter={hakemistoItem.name.charAt(0).toUpperCase().match(/^[A-ZÄÖÅ]/) ? hakemistoItem.name.charAt(0).toUpperCase() : '#'}
                >
                  <button 
                    id={`trigger-${hakemistoItem.id}-${hakemistoItem.dataItemType}`}
                    popovertarget={`popover-${hakemistoItem.id}-${hakemistoItem.dataItemType}`}
                    class="group list-item ingredient-popover-trigger text-left w-full"
                    data-item-id={hakemistoItem.id}
                    data-item-type={hakemistoItem.dataItemType}
                    data-category={hakemistoItem.dataCategory}
                    aria-label={`Näytä tiedot: ${hakemistoItem.name}`}
                  >
                    <span view-transition-name={`popover-title-${hakemistoItem.id}`}>
                      {hakemistoItem.name}
                    </span>
                  </button>
                  
                  <!-- Popover for this item -->
                  <div 
                    id={`popover-${hakemistoItem.id}-${hakemistoItem.dataItemType}`}
                    popover="auto"
                    class="ingredient-popover"
                    role="dialog"
                    aria-labelledby={`popover-${hakemistoItem.id}-${hakemistoItem.dataItemType}-title`}
                    data-item-id={hakemistoItem.id}
                    data-item-type={hakemistoItem.dataItemType}
                    data-category={hakemistoItem.dataCategory}
                  >
                    <div class="popover-header">
                      <h2 id={`popover-${hakemistoItem.id}-${hakemistoItem.dataItemType}-title`} class="popover-title">
                        <span class="popover-title-text" view-transition-name={`popover-title-${hakemistoItem.id}`}>Ladataan...</span>
                      </h2>
                      <button 
                        class="popover-close-btn"
                        style="outline-color: var(--color-primary-accent);"
                        popovertarget={`popover-${hakemistoItem.id}-${hakemistoItem.dataItemType}`}
                        popovertargetaction="hide"
                        aria-label="Sulje"
                      >
                        <svg class="popover-close-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                        </svg>
                      </button>
                    </div>
                    <div class="popover-content">
                      <div class="popover-image-container">
                        <div class="popover-image-skeleton w-full h-full bg-secondary-light animate-pulse">
                          <div class="skeleton-placeholder w-full h-full bg-secondary-light"></div>
                        </div>
                      </div>
                      <div class="popover-text-content">
                        <div class="popover-description-skeleton space-y-2">
                          <div class="skeleton-line h-4 bg-secondary-light animate-pulse rounded"></div>
                          <div class="skeleton-line skeleton-line-short h-4 bg-secondary-light animate-pulse rounded w-3/4"></div>
                          <div class="skeleton-line skeleton-line-medium h-4 bg-secondary-light animate-pulse rounded w-1/2"></div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          );
        })}
      </div>
    </div>
  </div>
	</Layout>



 