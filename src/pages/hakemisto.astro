---
import BaseLayout from '../layouts/BaseLayout.astro';
import UnifiedFilterSystem from '../components/UnifiedFilterSystem.jsx';
import { 
  createAlphabeticalGroups, 
  extractUniqueDietaryTags
} from '../utils/ruoanlaitto-data.ts';
import { processUnifiedData } from '../remark-wiki-link.mjs';

// Use the same unified data processing as recipe slug pages
const processedData = processUnifiedData();
const { allItems, ingredients, equipment: equipmentItems, techniques: techniqueItems, categories: dataCategories } = processedData;

// Get all categories from unified processing
const ingredientCategories = dataCategories.ingredients;
const equipmentCategories = dataCategories.equipment;
const techniqueCategories = dataCategories.techniques;

const categories = [
  // Main type categories
  { id: 'ainesosat', name: 'Ainesosat', description: 'Ruoanlaiton raaka-aineet' },
  { id: 'tekniikat', name: 'Tekniikat', description: 'Ruoanlaittomenetelmät' },
  { id: 'välineet', name: 'Välineet', description: 'Keittiövälineet ja -laitteet' },
  
  // Ingredient subcategories
  ...Object.values(ingredientCategories).map((cat: any) => ({
    id: cat.id,
    name: cat.name,
    description: cat.description || '',
    parent: 'ainesosat'
  })),
  
  // Equipment subcategories  
  ...Object.values(equipmentCategories).map((cat: any) => ({
    id: cat.id,
    name: cat.name,
    description: cat.description || '',
    parent: 'välineet'
  })),
  
  // Technique subcategories
  ...Object.values(techniqueCategories).map((cat: any) => ({
    id: cat.id,
    name: cat.name,
    description: cat.description || '',
    parent: 'tekniikat'
  }))
];

// Group items by type instead of alphabetically
const itemsByType = {
  ainesosat: ingredients as any[],
  tekniikat: techniqueItems as any[],
  välineet: equipmentItems as any[]
};

// Sort all items alphabetically at build time to prevent runtime resorting
Object.keys(itemsByType).forEach(typeKey => {
  itemsByType[typeKey].sort((a: any, b: any) => 
    a.name.localeCompare(b.name, 'fi', { numeric: true, sensitivity: 'base' })
  );
});

// Get all unique dietary tags for filtering (only from ingredients)
const dietaryOptions = extractUniqueDietaryTags(ingredients as any[]);

// Helper function to get optimized image URL
const getOptimizedImageUrl = (item: any, size: 'small' | 'large' = 'small') => {
  // Check if the item has optimized images embedded
  if (item && item.optimizedImages && item.optimizedImages[size]) {
    return item.optimizedImages[size];
  }
  
  // Fallback: construct URL from original imageUrl
  if (item && item.imageUrl) {
    const lastDotIndex = item.imageUrl.lastIndexOf('.');
    if (lastDotIndex > 0) {
      const basePath = item.imageUrl.substring(0, lastDotIndex);
      return `${basePath}-${size}.webp`;
    }
  }
  
  return null;
};

// Get all unique first letters for alphabet filtering
const allFirstLetters = new Set<string>();
allItems.forEach((item: any) => {
  const firstChar = item.name.charAt(0).toUpperCase();
  const letterKey = /^[A-ZÄÖÅ]/.test(firstChar) ? firstChar : '#';
  allFirstLetters.add(letterKey);
});

const activeLetters = Array.from(allFirstLetters).sort((a, b) => {
  if (a === '#') return 1;
  if (b === '#') return -1;
  return a.localeCompare(b, 'fi');
});

// Configure alphabet links as filters for unified filter bar
const alphabetLinks = activeLetters.map(letter => ({
  letter: letter,
  href: `#letter-${letter === '#' ? 'other' : letter}`,
  label: `Näytä kirjain ${letter}`
}));

// Type options for unified hakemisto
const typeOptions = [
  { id: 'ainesosat', name: 'Ainesosat' },
  { id: 'tekniikat', name: 'Tekniikat' },
  { id: 'välineet', name: 'Välineet' }
];

// Configure filter sections for the main popup
const mainFilterSections = [
  {
    id: 'sort',
    title: 'Järjestys',
    icon: 'M3 7v10a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2H5a2 2 0 00-2-2z',
    type: 'select' as const,
    isSort: true,
    options: [
      { id: 'alphabetical', label: 'Aakkosjärjestys', value: 'alphabetical', default: true },
      { id: 'type', label: 'Tyyppi', value: 'type' },
      { id: 'dietary', label: 'Ruokavalio', value: 'dietary' },
      { id: 'category', label: 'Kategoria', value: 'category' }
    ]
  },
  {
    id: 'type',
    title: 'Tyyppi',
    icon: 'M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10',
    type: 'multiSelect' as const,
    options: typeOptions.map(type => ({
      id: type.id,
      label: type.name,
      value: type.id
    })),
    gridCols: 'grid-cols-1 sm:grid-cols-3'
  },
  {
    id: 'dietary',
    title: 'Ruokavalio',
    icon: 'M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z',
    type: 'multiSelect' as const,
    options: dietaryOptions.map(diet => ({
      id: diet,
      label: diet,
      value: diet
    })),
    maxHeight: '60',
    gridCols: 'grid-cols-2 sm:grid-cols-3 lg:grid-cols-4'
  },
  {
    id: 'category',
    title: 'Alakategoriat',
    icon: 'M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z',
    type: 'select' as const,
    options: categories.filter(cat => (cat as any).parent).map(category => ({
      id: category.id,
      label: category.name,
      value: category.id
    })),
    maxHeight: '60',
    gridCols: 'grid-cols-1 sm:grid-cols-2'
  }
];
---

<BaseLayout title="Hakemisto | Ruoanlaitto" forceIngredientPopup={true} needsWikiLinks={true}>
  <!-- Skip to content -->
  <a href="#content-groups" class="sr-only focus:not-sr-only focus:absolute focus:top-4 focus:left-4 bg-gray-900 text-white px-4 py-2 rounded-lg z-50 transition-all">
    Siirry sisältöön
  </a>

  <div class="min-h-screen">
    <!-- Header -->
    <header class="mb-12 sm:mb-16 text-center">
      <h1 class="text-5xl md:text-6xl lg:text-7xl font-light mb-3 md:mb-6 text-gray-900 tracking-tight leading-tight">Hakemisto</h1>
      <p class="text-xl md:text-2xl text-gray-600 font-light mx-auto max-w-2xl">Kattava hakemisto ruoanlaiton raaka-aineista, välineistä ja tekniikoista</p>
    </header>

    <!-- Main Content -->
    <div class="max-w-4xl mx-auto">
      <!-- Unified Filter System -->
      <UnifiedFilterSystem
        config={{
          itemSelector: '.list-item-wrapper',
          sectionSelector: '.category-section',
          noResultsId: 'no-results',
          filterBlocks: {
            search: { fields: ['searchName', 'name', 'tags'] },
            sort: { type: 'select' },
            type: { type: 'multiSelect' },
            category: { type: 'select' },
            dietary: { type: 'multiSelect' },
            firstLetter: { type: 'select' }
          }
        }}
        searchPlaceholder="Etsi hakemistosta..."
        alphabetLinks={alphabetLinks as any}
        mainFilterButton={{
          ariaLabel: "Avaa suodattimet",
          icon: "M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.707A1 1 0 013 7V4z"
        }}
        mainFilterSections={mainFilterSections as any}
        resultsCountText="kohdetta löytyi"
        client:load
      />

      <!-- No Results -->
      <div id="no-results" class="hidden text-center justify-items-center py-20" role="status" aria-live="polite">
        <div class="text-gray-500">
          <svg class="w-16 h-16 mx-auto mb-4 text-gray-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
          </svg>
          <p class="text-lg font-medium text-gray-900 mb-2">Ei tuloksia</p>
          <p class="text-gray-500">Kokeile eri hakusanoja tai tyhjennä suodattimet</p>
        </div>
      </div>

      <!-- Main Content Groups -->
      <div class="content-groups-container" id="content-groups">
        <!-- Reference Items by Type -->
        {Object.entries(itemsByType).map(([typeKey, items]) => {
          const typeLabels = {
            ainesosat: 'Ainesosat',
            tekniikat: 'Tekniikat',
            välineet: 'Välineet'
          };
          
          return (
          <section 
              id={`type-${typeKey}`} 
              class="category-section scroll-mt-32 mb-10 lg:mb-12 last:mb-0"
              data-type={typeKey}
          >
              <!-- Type Header -->
              <div class="mb-6">
                <span class="reference-section-header">{typeLabels[typeKey]}</span>
              </div>
              
              <!-- Items List -->
              <div class="recipe-container space-y-1" data-type={typeKey}>
                  {items.map((item: any) => (
                  <div 
                      class="list-item-wrapper item"
                    data-tags={item.tags?.join(',') || ''}
                    data-dietary={item.dietaryInfo?.join(',') || ''}
                    data-category={item.category}
                    data-type={item.type}
                    data-name={item.name}
                    data-search-name={item.name.toLowerCase()}
                      data-first-letter={item.name.charAt(0).toUpperCase().match(/^[A-ZÄÖÅ]/) ? item.name.charAt(0).toUpperCase() : '#'}
                  >
                    <a 
                      href={`#${item.id}`} 
                        class="group list-item"
                      data-popup-handler="true"
                      data-item-type={item.dataItemType}
                      data-category={item.dataCategory}
                    >
                        <div class="list-item-content">
                          <div class="list-item-image">
                            {getOptimizedImageUrl(item, 'small') ? (
                              <img 
                                src={getOptimizedImageUrl(item, 'small')} 
                                alt={item.name} 
                                loading="lazy" 
                                decoding="async" 
                                width="80" 
                                height="60" 
                                class="w-20 h-15 object-cover rounded-lg"
                              />
                            ) : (
                              <div class="w-20 h-15 rounded-lg bg-gray-100 flex items-center justify-center">
                                <svg class="w-8 h-8 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                  {typeKey === 'ainesosat' && (
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4"></path>
                                  )}
                                  {typeKey === 'välineet' && (
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z"></path>
                                  )}
                                  {typeKey === 'tekniikat' && (
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z"></path>
                                  )}
                                </svg>
                              </div>
                            )}
                          </div>
                          <div class="list-item-text">
                            <span class="list-item-title">
                            {item.name}
                          </span>
                          {item.description && (
                              <p class="list-item-description">
                              {item.description}
                            </p>
                          )}
                        </div>
                        <svg 
                            class="list-item-arrow" 
                          fill="none" 
                          stroke="currentColor" 
                          viewBox="0 0 24 24"
                          aria-hidden="true"
                        >
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                        </svg>
                      </div>
                    </a>
                  </div>
                ))}
            </div>
          </section>
          );
        })}
      </div>
    </div>
  </div>
</BaseLayout>



 